  actor-rpc-api\src\main\scala\im\actor\server\api\rpc\service\auth\AuthHelpers.scala
  
//二次开发  by Lining 2016-6-7
import java.time.Instant
import java.time.temporal.ChronoUnit
import im.actor.server.file.UrlBuilderSeed
import im.actor.server.acl.ACLUtils
import im.actor.server.api.http.HttpApiConfig
import im.actor.server.persist.UserSignatureRepo
import im.actor.server.model.UserSignature


  /**
   * 二次开发添加的方法
   * Validate userId Of BeX5
   * used for this sign action.
   */
  protected def validateBeX5User(beX5UserId: String): Result[(Int, String)] = {
    //BeX5 UserId(PersonId)是Actor用户的昵称 
    for {
      userModel ← fromDBIOOption(AuthErrors.UsernameUnoccupied)(UserRepo.findByNickname(beX5UserId))
    } yield {
      updateUserSignature(userModel.id)
      (userModel.id, "CN")
    }
  }


  /**
    * 更新用户签名  by Lining 2016-6-7
    * @param userId
    */
  private def updateUserSignature(userId: Int) = {
    //得到baseUrl、签名等信息
    val httpConfig = HttpApiConfig.load.get
    val expire = Instant.now.plus(1, ChronoUnit.HOURS).getEpochSecond.toInt
    val seedBytes = UrlBuilderSeed(version = 0, expire = expire, randomPart = ACLUtils.randomHash()).toByteArray
    val baseUrl = s"${httpConfig.baseUri}/v1/files"
    val signatureSecret = ACLUtils.fileUrlBuilderSecret(seedBytes)

    val action = {
      UserSignatureRepo.createOrUpdate(UserSignature(userId, signatureSecret, expire, baseUrl))
    }
    db.run(action)
  }

  /**
   * 二次开发添加的方法
   * 创建User模型的实例
   */
  protected def newUser(name: String, nickName: String): Result[User] = {
    val rng = ThreadLocalSecureRandom.current()
    val user = User(
      id = nextIntId(rng),
      accessSalt = ACLUtils.nextAccessSalt(rng),
      name = name,
      countryCode = "CN",
      sex = NoSex,
      state = UserState.Registered,
      createdAt = LocalDateTime.now(ZoneOffset.UTC),
      external = None,
      nickname = Some(nickName)
    )
    point(user)
  }