actor-core/src/main/scala/im/actor/server/sequence/UserSequence.scala

//private lazy val vendorPush = context.actorOf(VendorPush.props(userId), "vendor-push")

  def initialized: Receive = {
    //case cmd: VendorPushCommand ⇒ vendorPush forward cmd
    case DeliverUpdate(mappingOpt, pushRules, reduceKey, deliveryId) ⇒
      mappingOpt match {
        case Some(mapping) ⇒ deliver(mapping, pushRules, reduceKey, deliveryId)
        case None ⇒
          log.error("Empty mapping")
      }
    case GetSeqState() ⇒
      sender() ! SeqState(getSeq)
  }
  
    private def deliver(mapping: UpdateMapping, pushRules: Option[PushRules], reduceKey: Option[StringValue], deliveryId: String): Unit = {
    cached(deliveryId) {
      val seq = nextSeq()

      val seqUpdate = SeqUpdate(
        userId,
        seq,
        System.currentTimeMillis(),
        reduceKey,
        Some(mapping)
      )

      writeToDb(seqUpdate) map (_ ⇒ SeqState(seq)) andThen {
        case Success(_) ⇒
          pubSubExt.publish(Publish(topic(userId), UserSequenceEvents.NewUpdate(Some(seqUpdate), pushRules, None, ByteString.EMPTY)))
        //vendorPush ! DeliverPush(seq, pushRules)
      }
    }
  }