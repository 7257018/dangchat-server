actor-core/src/main/scala/im/actor/server/dialog/ActorDelivery.scala

//引入justep消息（推送）类库  by Lining 2016-6-22
import com.justep.message.dispatcher._


    for {
      senderName ← userExt.getName(senderUserId, receiverUserId)
      (pushText, censoredPushText) ← getPushText(peer, receiverUserId, senderName, message)
      _ ← seqUpdatesExt.deliverSingleUpdate(
        receiverUserId,
        receiverUpdate,
        PushRules(isFat = isFat).withData(
          PushData()
            .withText(pushText)
            .withCensoredText(censoredPushText)
            .withPeer(peer)
        ),
        deliveryId = s"msg_${peer.toString}_$randomId"
      )
    } yield {
      //发送推送  by Lining 2016-6-22
      sendPush(senderName, pushText, censoredPushText, receiverUserId)
      ()
    }
  }
  
  
  /**
   * 发送推送
   * by Lining 2016-6-22
   *
   * @param senderName
   * @param pushText
   * @param censoredPushText
   * @param receiverUserId
   */
  private def sendPush(senderName: String, pushText: String, censoredPushText: String, receiverUserId: Int): Unit = {
    val serverUri = scala.util.Try(system.settings.config.getString("services.justep.push.server-uri"))
    val userName = scala.util.Try(system.settings.config.getString("services.justep.push.user"))
    val password = scala.util.Try(system.settings.config.getString("services.justep.push.password"))
    (serverUri, userName, password) match {
      case (scala.util.Success(v1), scala.util.Success(v2), scala.util.Success(v3)) ⇒
        val message = new Message(pushText, "", null)
        val personIds = new java.util.HashSet[String]()
        //得到X5用户Id
        DbExtension(system).db.run(im.actor.server.persist.UserRepo.findNickname(receiverUserId)).map {
          case Some(x5UserId) ⇒
            DbExtension(system).db.run(im.actor.server.persist.ClientStateRepo.find(receiverUserId)).map {
              case Some(clientState) ⇒
                if (clientState.state == 0) {
                  //app在pause状态，发送推送通知
                  personIds.add(x5UserId.get)
                }
              case _ ⇒
                //没有app状态，默认发送推送通知
                personIds.add(x5UserId.get)
            }
            MessageDispatcherFactory.createMessageDispatcher(v1, v2, v3).sendMessage(message, personIds);
          case _ ⇒
        }
      case _ ⇒
    }
  }