// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package im.actor.server.file



@SerialVersionUID(0L)
final case class Avatar(
    smallImage: Option[im.actor.server.file.AvatarImage] = None,
    largeImage: Option[im.actor.server.file.AvatarImage] = None,
    fullImage: Option[im.actor.server.file.AvatarImage] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Avatar] with com.trueaccord.lenses.Updatable[Avatar] {
    @transient
    lazy val serializedSize: Int = {
      var __size = 0
      if (smallImage.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(smallImage.get.serializedSize) + smallImage.get.serializedSize }
      if (largeImage.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(largeImage.get.serializedSize) + largeImage.get.serializedSize }
      if (fullImage.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(fullImage.get.serializedSize) + fullImage.get.serializedSize }
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      smallImage.foreach { __v => 
        output.writeTag(1, 2)
        output.writeRawVarint32(__v.serializedSize)
        __v.writeTo(output)
      };
      largeImage.foreach { __v => 
        output.writeTag(2, 2)
        output.writeRawVarint32(__v.serializedSize)
        __v.writeTo(output)
      };
      fullImage.foreach { __v => 
        output.writeTag(3, 2)
        output.writeRawVarint32(__v.serializedSize)
        __v.writeTo(output)
      };
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): im.actor.server.file.Avatar = {
      var __smallImage = this.smallImage
      var __largeImage = this.largeImage
      var __fullImage = this.fullImage
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __smallImage = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __smallImage.getOrElse(im.actor.server.file.AvatarImage.defaultInstance)))
          case 18 =>
            __largeImage = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __largeImage.getOrElse(im.actor.server.file.AvatarImage.defaultInstance)))
          case 26 =>
            __fullImage = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __fullImage.getOrElse(im.actor.server.file.AvatarImage.defaultInstance)))
          case tag => __input.skipField(tag)
        }
      }
      im.actor.server.file.Avatar(
          smallImage = __smallImage,
          largeImage = __largeImage,
          fullImage = __fullImage
      )
    }
    def getSmallImage: im.actor.server.file.AvatarImage = smallImage.getOrElse(im.actor.server.file.AvatarImage.defaultInstance)
    def clearSmallImage: Avatar = copy(smallImage = None)
    def withSmallImage(__v: im.actor.server.file.AvatarImage): Avatar = copy(smallImage = Some(__v))
    def getLargeImage: im.actor.server.file.AvatarImage = largeImage.getOrElse(im.actor.server.file.AvatarImage.defaultInstance)
    def clearLargeImage: Avatar = copy(largeImage = None)
    def withLargeImage(__v: im.actor.server.file.AvatarImage): Avatar = copy(largeImage = Some(__v))
    def getFullImage: im.actor.server.file.AvatarImage = fullImage.getOrElse(im.actor.server.file.AvatarImage.defaultInstance)
    def clearFullImage: Avatar = copy(fullImage = None)
    def withFullImage(__v: im.actor.server.file.AvatarImage): Avatar = copy(fullImage = Some(__v))
    def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
      __field.getNumber match {
        case 1 => smallImage.getOrElse(null)
        case 2 => largeImage.getOrElse(null)
        case 3 => fullImage.getOrElse(null)
      }
    }
    override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = im.actor.server.file.Avatar
}

object Avatar extends com.trueaccord.scalapb.GeneratedMessageCompanion[Avatar]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Avatar]  = this
  def fromFieldsMap(__fieldsMap: Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): im.actor.server.file.Avatar = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    im.actor.server.file.Avatar(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[Option[im.actor.server.file.AvatarImage]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[Option[im.actor.server.file.AvatarImage]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[Option[im.actor.server.file.AvatarImage]]
    )
  }
  def descriptor: com.google.protobuf.Descriptors.Descriptor = FileProto.descriptor.getMessageTypes.get(2)
  def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    require(__field.getContainingType() == descriptor, "FieldDescriptor does not match message type.")
    var __out: com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    __field.getNumber match {
      case 1 => __out = im.actor.server.file.AvatarImage
      case 2 => __out = im.actor.server.file.AvatarImage
      case 3 => __out = im.actor.server.file.AvatarImage
    }
  __out
  }
  def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
  lazy val defaultInstance = im.actor.server.file.Avatar(
  )
  implicit class AvatarLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, Avatar]) extends com.trueaccord.lenses.ObjectLens[UpperPB, Avatar](_l) {
    def smallImage: com.trueaccord.lenses.Lens[UpperPB, im.actor.server.file.AvatarImage] = field(_.getSmallImage)((c_, f_) => c_.copy(smallImage = Some(f_)))
    def optionalSmallImage: com.trueaccord.lenses.Lens[UpperPB, Option[im.actor.server.file.AvatarImage]] = field(_.smallImage)((c_, f_) => c_.copy(smallImage = f_))
    def largeImage: com.trueaccord.lenses.Lens[UpperPB, im.actor.server.file.AvatarImage] = field(_.getLargeImage)((c_, f_) => c_.copy(largeImage = Some(f_)))
    def optionalLargeImage: com.trueaccord.lenses.Lens[UpperPB, Option[im.actor.server.file.AvatarImage]] = field(_.largeImage)((c_, f_) => c_.copy(largeImage = f_))
    def fullImage: com.trueaccord.lenses.Lens[UpperPB, im.actor.server.file.AvatarImage] = field(_.getFullImage)((c_, f_) => c_.copy(fullImage = Some(f_)))
    def optionalFullImage: com.trueaccord.lenses.Lens[UpperPB, Option[im.actor.server.file.AvatarImage]] = field(_.fullImage)((c_, f_) => c_.copy(fullImage = f_))
  }
  final val SMALLIMAGE_FIELD_NUMBER = 1
  final val LARGEIMAGE_FIELD_NUMBER = 2
  final val FULLIMAGE_FIELD_NUMBER = 3
}
