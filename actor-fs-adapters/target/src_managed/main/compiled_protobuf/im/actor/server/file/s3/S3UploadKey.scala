// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package im.actor.server.file.s3



@SerialVersionUID(0L)
final case class S3UploadKey(
    key: String = ""
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[S3UploadKey] with com.trueaccord.lenses.Updatable[S3UploadKey] with im.actor.server.file.UploadKey {
    @transient
    lazy val serializedSize: Int = {
      var __size = 0
      __size += com.google.protobuf.CodedOutputStream.computeStringSize(1, key)
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      output.writeString(1, key)
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): im.actor.server.file.s3.S3UploadKey = {
      var __key = this.key
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = __input.readString()
          case tag => __input.skipField(tag)
        }
      }
      im.actor.server.file.s3.S3UploadKey(
          key = __key
      )
    }
    def withKey(__v: String): S3UploadKey = copy(key = __v)
    def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
      __field.getNumber match {
        case 1 => key
      }
    }
    override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = im.actor.server.file.s3.S3UploadKey
}

object S3UploadKey extends com.trueaccord.scalapb.GeneratedMessageCompanion[S3UploadKey]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[S3UploadKey]  = this
  def fromFieldsMap(__fieldsMap: Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): im.actor.server.file.s3.S3UploadKey = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    im.actor.server.file.s3.S3UploadKey(
      __fieldsMap(__fields.get(0)).asInstanceOf[String]
    )
  }
  def descriptor: com.google.protobuf.Descriptors.Descriptor = S3Proto.descriptor.getMessageTypes.get(0)
  def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__field)
  def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
  lazy val defaultInstance = im.actor.server.file.s3.S3UploadKey(
    key = ""
  )
  implicit class S3UploadKeyLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, S3UploadKey]) extends com.trueaccord.lenses.ObjectLens[UpperPB, S3UploadKey](_l) {
    def key: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.key)((c_, f_) => c_.copy(key = f_))
  }
  final val KEY_FIELD_NUMBER = 1
}
