// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package im.actor.server.file



@SerialVersionUID(0L)
final case class UrlBuilderSeed(
    version: Int = 0,
    expire: Int = 0,
    randomPart: String = ""
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[UrlBuilderSeed] with com.trueaccord.lenses.Updatable[UrlBuilderSeed] {
    @transient
    lazy val serializedSize: Int = {
      var __size = 0
      __size += com.google.protobuf.CodedOutputStream.computeInt32Size(1, version)
      __size += com.google.protobuf.CodedOutputStream.computeInt32Size(2, expire)
      __size += com.google.protobuf.CodedOutputStream.computeStringSize(3, randomPart)
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      output.writeInt32(1, version)
      output.writeInt32(2, expire)
      output.writeString(3, randomPart)
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): im.actor.server.file.UrlBuilderSeed = {
      var __version = this.version
      var __expire = this.expire
      var __randomPart = this.randomPart
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __version = __input.readInt32()
          case 16 =>
            __expire = __input.readInt32()
          case 26 =>
            __randomPart = __input.readString()
          case tag => __input.skipField(tag)
        }
      }
      im.actor.server.file.UrlBuilderSeed(
          version = __version,
          expire = __expire,
          randomPart = __randomPart
      )
    }
    def withVersion(__v: Int): UrlBuilderSeed = copy(version = __v)
    def withExpire(__v: Int): UrlBuilderSeed = copy(expire = __v)
    def withRandomPart(__v: String): UrlBuilderSeed = copy(randomPart = __v)
    def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
      __field.getNumber match {
        case 1 => version
        case 2 => expire
        case 3 => randomPart
      }
    }
    override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = im.actor.server.file.UrlBuilderSeed
}

object UrlBuilderSeed extends com.trueaccord.scalapb.GeneratedMessageCompanion[UrlBuilderSeed]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[UrlBuilderSeed]  = this
  def fromFieldsMap(__fieldsMap: Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): im.actor.server.file.UrlBuilderSeed = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    im.actor.server.file.UrlBuilderSeed(
      __fieldsMap(__fields.get(0)).asInstanceOf[Int],
      __fieldsMap(__fields.get(1)).asInstanceOf[Int],
      __fieldsMap(__fields.get(2)).asInstanceOf[String]
    )
  }
  def descriptor: com.google.protobuf.Descriptors.Descriptor = FileProto.descriptor.getMessageTypes.get(3)
  def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__field)
  def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
  lazy val defaultInstance = im.actor.server.file.UrlBuilderSeed(
    version = 0,
    expire = 0,
    randomPart = ""
  )
  implicit class UrlBuilderSeedLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, UrlBuilderSeed]) extends com.trueaccord.lenses.ObjectLens[UpperPB, UrlBuilderSeed](_l) {
    def version: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.version)((c_, f_) => c_.copy(version = f_))
    def expire: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.expire)((c_, f_) => c_.copy(expire = f_))
    def randomPart: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.randomPart)((c_, f_) => c_.copy(randomPart = f_))
  }
  final val VERSION_FIELD_NUMBER = 1
  final val EXPIRE_FIELD_NUMBER = 2
  final val RANDOM_PART_FIELD_NUMBER = 3
}
