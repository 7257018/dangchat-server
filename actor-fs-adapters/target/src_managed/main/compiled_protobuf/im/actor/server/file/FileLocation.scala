// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package im.actor.server.file



@SerialVersionUID(0L)
final case class FileLocation(
    fileId: Long = 0L,
    accessHash: Long = 0L
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[FileLocation] with com.trueaccord.lenses.Updatable[FileLocation] {
    @transient
    lazy val serializedSize: Int = {
      var __size = 0
      __size += com.google.protobuf.CodedOutputStream.computeInt64Size(1, fileId)
      __size += com.google.protobuf.CodedOutputStream.computeInt64Size(2, accessHash)
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      output.writeInt64(1, fileId)
      output.writeInt64(2, accessHash)
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): im.actor.server.file.FileLocation = {
      var __fileId = this.fileId
      var __accessHash = this.accessHash
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __fileId = __input.readInt64()
          case 16 =>
            __accessHash = __input.readInt64()
          case tag => __input.skipField(tag)
        }
      }
      im.actor.server.file.FileLocation(
          fileId = __fileId,
          accessHash = __accessHash
      )
    }
    def withFileId(__v: Long): FileLocation = copy(fileId = __v)
    def withAccessHash(__v: Long): FileLocation = copy(accessHash = __v)
    def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
      __field.getNumber match {
        case 1 => fileId
        case 2 => accessHash
      }
    }
    override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = im.actor.server.file.FileLocation
}

object FileLocation extends com.trueaccord.scalapb.GeneratedMessageCompanion[FileLocation]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[FileLocation]  = this
  def fromFieldsMap(__fieldsMap: Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): im.actor.server.file.FileLocation = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    im.actor.server.file.FileLocation(
      __fieldsMap(__fields.get(0)).asInstanceOf[Long],
      __fieldsMap(__fields.get(1)).asInstanceOf[Long]
    )
  }
  def descriptor: com.google.protobuf.Descriptors.Descriptor = FileProto.descriptor.getMessageTypes.get(0)
  def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__field)
  def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
  lazy val defaultInstance = im.actor.server.file.FileLocation(
    fileId = 0L,
    accessHash = 0L
  )
  implicit class FileLocationLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, FileLocation]) extends com.trueaccord.lenses.ObjectLens[UpperPB, FileLocation](_l) {
    def fileId: com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.fileId)((c_, f_) => c_.copy(fileId = f_))
    def accessHash: com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.accessHash)((c_, f_) => c_.copy(accessHash = f_))
  }
  final val FILE_ID_FIELD_NUMBER = 1
  final val ACCESS_HASH_FIELD_NUMBER = 2
}
