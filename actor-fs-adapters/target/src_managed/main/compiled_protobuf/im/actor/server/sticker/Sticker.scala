// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package im.actor.server.sticker



@SerialVersionUID(0L)
final case class Sticker(
    small: Option[im.actor.server.sticker.StickerImage] = None,
    medium: Option[im.actor.server.sticker.StickerImage] = None,
    large: Option[im.actor.server.sticker.StickerImage] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Sticker] with com.trueaccord.lenses.Updatable[Sticker] {
    @transient
    lazy val serializedSize: Int = {
      var __size = 0
      if (small.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(small.get.serializedSize) + small.get.serializedSize }
      if (medium.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(medium.get.serializedSize) + medium.get.serializedSize }
      if (large.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(large.get.serializedSize) + large.get.serializedSize }
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      small.foreach { __v => 
        output.writeTag(1, 2)
        output.writeRawVarint32(__v.serializedSize)
        __v.writeTo(output)
      };
      medium.foreach { __v => 
        output.writeTag(2, 2)
        output.writeRawVarint32(__v.serializedSize)
        __v.writeTo(output)
      };
      large.foreach { __v => 
        output.writeTag(3, 2)
        output.writeRawVarint32(__v.serializedSize)
        __v.writeTo(output)
      };
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): im.actor.server.sticker.Sticker = {
      var __small = this.small
      var __medium = this.medium
      var __large = this.large
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __small = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __small.getOrElse(im.actor.server.sticker.StickerImage.defaultInstance)))
          case 18 =>
            __medium = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __medium.getOrElse(im.actor.server.sticker.StickerImage.defaultInstance)))
          case 26 =>
            __large = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __large.getOrElse(im.actor.server.sticker.StickerImage.defaultInstance)))
          case tag => __input.skipField(tag)
        }
      }
      im.actor.server.sticker.Sticker(
          small = __small,
          medium = __medium,
          large = __large
      )
    }
    def getSmall: im.actor.server.sticker.StickerImage = small.getOrElse(im.actor.server.sticker.StickerImage.defaultInstance)
    def clearSmall: Sticker = copy(small = None)
    def withSmall(__v: im.actor.server.sticker.StickerImage): Sticker = copy(small = Some(__v))
    def getMedium: im.actor.server.sticker.StickerImage = medium.getOrElse(im.actor.server.sticker.StickerImage.defaultInstance)
    def clearMedium: Sticker = copy(medium = None)
    def withMedium(__v: im.actor.server.sticker.StickerImage): Sticker = copy(medium = Some(__v))
    def getLarge: im.actor.server.sticker.StickerImage = large.getOrElse(im.actor.server.sticker.StickerImage.defaultInstance)
    def clearLarge: Sticker = copy(large = None)
    def withLarge(__v: im.actor.server.sticker.StickerImage): Sticker = copy(large = Some(__v))
    def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
      __field.getNumber match {
        case 1 => small.getOrElse(null)
        case 2 => medium.getOrElse(null)
        case 3 => large.getOrElse(null)
      }
    }
    override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = im.actor.server.sticker.Sticker
}

object Sticker extends com.trueaccord.scalapb.GeneratedMessageCompanion[Sticker]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Sticker]  = this
  def fromFieldsMap(__fieldsMap: Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): im.actor.server.sticker.Sticker = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    im.actor.server.sticker.Sticker(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[Option[im.actor.server.sticker.StickerImage]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[Option[im.actor.server.sticker.StickerImage]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[Option[im.actor.server.sticker.StickerImage]]
    )
  }
  def descriptor: com.google.protobuf.Descriptors.Descriptor = StickerProto.descriptor.getMessageTypes.get(1)
  def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    require(__field.getContainingType() == descriptor, "FieldDescriptor does not match message type.")
    var __out: com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    __field.getNumber match {
      case 1 => __out = im.actor.server.sticker.StickerImage
      case 2 => __out = im.actor.server.sticker.StickerImage
      case 3 => __out = im.actor.server.sticker.StickerImage
    }
  __out
  }
  def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
  lazy val defaultInstance = im.actor.server.sticker.Sticker(
  )
  implicit class StickerLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, Sticker]) extends com.trueaccord.lenses.ObjectLens[UpperPB, Sticker](_l) {
    def small: com.trueaccord.lenses.Lens[UpperPB, im.actor.server.sticker.StickerImage] = field(_.getSmall)((c_, f_) => c_.copy(small = Some(f_)))
    def optionalSmall: com.trueaccord.lenses.Lens[UpperPB, Option[im.actor.server.sticker.StickerImage]] = field(_.small)((c_, f_) => c_.copy(small = f_))
    def medium: com.trueaccord.lenses.Lens[UpperPB, im.actor.server.sticker.StickerImage] = field(_.getMedium)((c_, f_) => c_.copy(medium = Some(f_)))
    def optionalMedium: com.trueaccord.lenses.Lens[UpperPB, Option[im.actor.server.sticker.StickerImage]] = field(_.medium)((c_, f_) => c_.copy(medium = f_))
    def large: com.trueaccord.lenses.Lens[UpperPB, im.actor.server.sticker.StickerImage] = field(_.getLarge)((c_, f_) => c_.copy(large = Some(f_)))
    def optionalLarge: com.trueaccord.lenses.Lens[UpperPB, Option[im.actor.server.sticker.StickerImage]] = field(_.large)((c_, f_) => c_.copy(large = f_))
  }
  final val SMALL_FIELD_NUMBER = 1
  final val MEDIUM_FIELD_NUMBER = 2
  final val LARGE_FIELD_NUMBER = 3
}
