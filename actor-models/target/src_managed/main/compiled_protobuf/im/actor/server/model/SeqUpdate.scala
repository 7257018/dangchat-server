// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package im.actor.server.model


import im.actor.server.model.ModelTypeMappers._

@SerialVersionUID(0L)
final case class SeqUpdate(
    userId: Int = 0,
    seq: Int = 0,
    timestamp: Long = 0L,
    reduceKey: Option[com.google.protobuf.wrappers.StringValue] = None,
    mapping: Option[im.actor.server.model.UpdateMapping] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[SeqUpdate] with com.trueaccord.lenses.Updatable[SeqUpdate] {
    @transient
    lazy val serializedSize: Int = {
      var __size = 0
      if (userId != 0) { __size += com.google.protobuf.CodedOutputStream.computeInt32Size(1, userId) }
      if (seq != 0) { __size += com.google.protobuf.CodedOutputStream.computeInt32Size(2, seq) }
      if (timestamp != 0L) { __size += com.google.protobuf.CodedOutputStream.computeInt64Size(3, timestamp) }
      if (reduceKey.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(reduceKey.get.serializedSize) + reduceKey.get.serializedSize }
      if (mapping.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(mapping.get.serializedSize) + mapping.get.serializedSize }
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = userId
        if (__v != 0) {
          output.writeInt32(1, __v)
        }
      };
      {
        val __v = seq
        if (__v != 0) {
          output.writeInt32(2, __v)
        }
      };
      {
        val __v = timestamp
        if (__v != 0L) {
          output.writeInt64(3, __v)
        }
      };
      mapping.foreach { __v => 
        output.writeTag(4, 2)
        output.writeRawVarint32(__v.serializedSize)
        __v.writeTo(output)
      };
      reduceKey.foreach { __v => 
        output.writeTag(5, 2)
        output.writeRawVarint32(__v.serializedSize)
        __v.writeTo(output)
      };
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): im.actor.server.model.SeqUpdate = {
      var __userId = this.userId
      var __seq = this.seq
      var __timestamp = this.timestamp
      var __reduceKey = this.reduceKey
      var __mapping = this.mapping
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __userId = __input.readInt32()
          case 16 =>
            __seq = __input.readInt32()
          case 24 =>
            __timestamp = __input.readInt64()
          case 42 =>
            __reduceKey = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __reduceKey.getOrElse(com.google.protobuf.wrappers.StringValue.defaultInstance)))
          case 34 =>
            __mapping = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __mapping.getOrElse(im.actor.server.model.UpdateMapping.defaultInstance)))
          case tag => __input.skipField(tag)
        }
      }
      im.actor.server.model.SeqUpdate(
          userId = __userId,
          seq = __seq,
          timestamp = __timestamp,
          reduceKey = __reduceKey,
          mapping = __mapping
      )
    }
    def withUserId(__v: Int): SeqUpdate = copy(userId = __v)
    def withSeq(__v: Int): SeqUpdate = copy(seq = __v)
    def withTimestamp(__v: Long): SeqUpdate = copy(timestamp = __v)
    def getReduceKey: com.google.protobuf.wrappers.StringValue = reduceKey.getOrElse(com.google.protobuf.wrappers.StringValue.defaultInstance)
    def clearReduceKey: SeqUpdate = copy(reduceKey = None)
    def withReduceKey(__v: com.google.protobuf.wrappers.StringValue): SeqUpdate = copy(reduceKey = Some(__v))
    def getMapping: im.actor.server.model.UpdateMapping = mapping.getOrElse(im.actor.server.model.UpdateMapping.defaultInstance)
    def clearMapping: SeqUpdate = copy(mapping = None)
    def withMapping(__v: im.actor.server.model.UpdateMapping): SeqUpdate = copy(mapping = Some(__v))
    def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
      __field.getNumber match {
        case 1 => {
          val __t = userId
          if (__t != 0) __t else null
        }
        case 2 => {
          val __t = seq
          if (__t != 0) __t else null
        }
        case 3 => {
          val __t = timestamp
          if (__t != 0L) __t else null
        }
        case 5 => reduceKey.getOrElse(null)
        case 4 => mapping.getOrElse(null)
      }
    }
    override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = im.actor.server.model.SeqUpdate
}

object SeqUpdate extends com.trueaccord.scalapb.GeneratedMessageCompanion[SeqUpdate]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[SeqUpdate]  = this
  def fromFieldsMap(__fieldsMap: Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): im.actor.server.model.SeqUpdate = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    im.actor.server.model.SeqUpdate(
      __fieldsMap.getOrElse(__fields.get(0), 0).asInstanceOf[Int],
      __fieldsMap.getOrElse(__fields.get(1), 0).asInstanceOf[Int],
      __fieldsMap.getOrElse(__fields.get(2), 0L).asInstanceOf[Long],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[Option[com.google.protobuf.wrappers.StringValue]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[Option[im.actor.server.model.UpdateMapping]]
    )
  }
  def descriptor: com.google.protobuf.Descriptors.Descriptor = ModelProto.descriptor.getMessageTypes.get(2)
  def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    require(__field.getContainingType() == descriptor, "FieldDescriptor does not match message type.")
    var __out: com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    __field.getNumber match {
      case 5 => __out = com.google.protobuf.wrappers.StringValue
      case 4 => __out = im.actor.server.model.UpdateMapping
    }
  __out
  }
  def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
  lazy val defaultInstance = im.actor.server.model.SeqUpdate(
  )
  implicit class SeqUpdateLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, SeqUpdate]) extends com.trueaccord.lenses.ObjectLens[UpperPB, SeqUpdate](_l) {
    def userId: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.userId)((c_, f_) => c_.copy(userId = f_))
    def seq: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.seq)((c_, f_) => c_.copy(seq = f_))
    def timestamp: com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.timestamp)((c_, f_) => c_.copy(timestamp = f_))
    def reduceKey: com.trueaccord.lenses.Lens[UpperPB, com.google.protobuf.wrappers.StringValue] = field(_.getReduceKey)((c_, f_) => c_.copy(reduceKey = Some(f_)))
    def optionalReduceKey: com.trueaccord.lenses.Lens[UpperPB, Option[com.google.protobuf.wrappers.StringValue]] = field(_.reduceKey)((c_, f_) => c_.copy(reduceKey = f_))
    def mapping: com.trueaccord.lenses.Lens[UpperPB, im.actor.server.model.UpdateMapping] = field(_.getMapping)((c_, f_) => c_.copy(mapping = Some(f_)))
    def optionalMapping: com.trueaccord.lenses.Lens[UpperPB, Option[im.actor.server.model.UpdateMapping]] = field(_.mapping)((c_, f_) => c_.copy(mapping = f_))
  }
  final val USER_ID_FIELD_NUMBER = 1
  final val SEQ_FIELD_NUMBER = 2
  final val TIMESTAMP_FIELD_NUMBER = 3
  final val REDUCE_KEY_FIELD_NUMBER = 5
  final val MAPPING_FIELD_NUMBER = 4
}
