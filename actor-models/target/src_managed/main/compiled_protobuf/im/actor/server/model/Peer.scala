// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package im.actor.server.model


import im.actor.server.model.ModelTypeMappers._

@SerialVersionUID(0L)
final case class Peer(
    `type`: im.actor.server.model.PeerType = im.actor.server.model.PeerType.Unknown,
    id: Int = 0
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Peer] with com.trueaccord.lenses.Updatable[Peer] with im.actor.server.model.PeerBase {
    @transient
    lazy val serializedSize: Int = {
      var __size = 0
      if (`type` != im.actor.server.model.PeerType.Unknown) { __size += com.google.protobuf.CodedOutputStream.computeEnumSize(1, `type`.value) }
      if (id != 0) { __size += com.google.protobuf.CodedOutputStream.computeInt32Size(2, id) }
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = `type`
        if (__v != im.actor.server.model.PeerType.Unknown) {
          output.writeEnum(1, __v.value)
        }
      };
      {
        val __v = id
        if (__v != 0) {
          output.writeInt32(2, __v)
        }
      };
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): im.actor.server.model.Peer = {
      var __type = this.`type`
      var __id = this.id
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __type = im.actor.server.model.PeerType.fromValue(__input.readEnum())
          case 16 =>
            __id = __input.readInt32()
          case tag => __input.skipField(tag)
        }
      }
      im.actor.server.model.Peer(
          `type` = __type,
          id = __id
      )
    }
    def withType(__v: im.actor.server.model.PeerType): Peer = copy(`type` = __v)
    def withId(__v: Int): Peer = copy(id = __v)
    def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
      __field.getNumber match {
        case 1 => {
          val __t = `type`.valueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 2 => {
          val __t = id
          if (__t != 0) __t else null
        }
      }
    }
    override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = im.actor.server.model.Peer
}

object Peer extends com.trueaccord.scalapb.GeneratedMessageCompanion[Peer]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Peer]  = this
  def fromFieldsMap(__fieldsMap: Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): im.actor.server.model.Peer = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    im.actor.server.model.Peer(
      im.actor.server.model.PeerType.fromValue(__fieldsMap.getOrElse(__fields.get(0), im.actor.server.model.PeerType.Unknown.valueDescriptor).asInstanceOf[com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      __fieldsMap.getOrElse(__fields.get(1), 0).asInstanceOf[Int]
    )
  }
  def descriptor: com.google.protobuf.Descriptors.Descriptor = ModelProto.descriptor.getMessageTypes.get(3)
  def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__field)
  def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
    require(__field.getContainingType() == descriptor, "FieldDescriptor does not match message type.")
    __field.getNumber match {
      case 1 => im.actor.server.model.PeerType
    }
  }
  lazy val defaultInstance = im.actor.server.model.Peer(
  )
  implicit class PeerLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, Peer]) extends com.trueaccord.lenses.ObjectLens[UpperPB, Peer](_l) {
    def `type`: com.trueaccord.lenses.Lens[UpperPB, im.actor.server.model.PeerType] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    def id: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.id)((c_, f_) => c_.copy(id = f_))
  }
  final val TYPE_FIELD_NUMBER = 1
  final val ID_FIELD_NUMBER = 2
}
