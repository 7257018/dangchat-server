// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package im.actor.server.model.encryption



@SerialVersionUID(0L)
final case class EncryptionKeySignature(
    keyId: Long = 0L,
    alg: String = "",
    signature: com.google.protobuf.ByteString = com.google.protobuf.ByteString.EMPTY
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[EncryptionKeySignature] with com.trueaccord.lenses.Updatable[EncryptionKeySignature] {
    @transient
    lazy val serializedSize: Int = {
      var __size = 0
      if (keyId != 0L) { __size += com.google.protobuf.CodedOutputStream.computeInt64Size(1, keyId) }
      if (alg != "") { __size += com.google.protobuf.CodedOutputStream.computeStringSize(2, alg) }
      if (signature != com.google.protobuf.ByteString.EMPTY) { __size += com.google.protobuf.CodedOutputStream.computeBytesSize(3, signature) }
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = keyId
        if (__v != 0L) {
          output.writeInt64(1, __v)
        }
      };
      {
        val __v = alg
        if (__v != "") {
          output.writeString(2, __v)
        }
      };
      {
        val __v = signature
        if (__v != com.google.protobuf.ByteString.EMPTY) {
          output.writeBytes(3, __v)
        }
      };
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): im.actor.server.model.encryption.EncryptionKeySignature = {
      var __keyId = this.keyId
      var __alg = this.alg
      var __signature = this.signature
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __keyId = __input.readInt64()
          case 18 =>
            __alg = __input.readString()
          case 26 =>
            __signature = __input.readBytes()
          case tag => __input.skipField(tag)
        }
      }
      im.actor.server.model.encryption.EncryptionKeySignature(
          keyId = __keyId,
          alg = __alg,
          signature = __signature
      )
    }
    def withKeyId(__v: Long): EncryptionKeySignature = copy(keyId = __v)
    def withAlg(__v: String): EncryptionKeySignature = copy(alg = __v)
    def withSignature(__v: com.google.protobuf.ByteString): EncryptionKeySignature = copy(signature = __v)
    def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
      __field.getNumber match {
        case 1 => {
          val __t = keyId
          if (__t != 0L) __t else null
        }
        case 2 => {
          val __t = alg
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = signature
          if (__t != com.google.protobuf.ByteString.EMPTY) __t else null
        }
      }
    }
    override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = im.actor.server.model.encryption.EncryptionKeySignature
}

object EncryptionKeySignature extends com.trueaccord.scalapb.GeneratedMessageCompanion[EncryptionKeySignature]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[EncryptionKeySignature]  = this
  def fromFieldsMap(__fieldsMap: Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): im.actor.server.model.encryption.EncryptionKeySignature = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    im.actor.server.model.encryption.EncryptionKeySignature(
      __fieldsMap.getOrElse(__fields.get(0), 0L).asInstanceOf[Long],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(2), com.google.protobuf.ByteString.EMPTY).asInstanceOf[com.google.protobuf.ByteString]
    )
  }
  def descriptor: com.google.protobuf.Descriptors.Descriptor = ModelEncryptionProto.descriptor.getMessageTypes.get(1)
  def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__field)
  def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
  lazy val defaultInstance = im.actor.server.model.encryption.EncryptionKeySignature(
  )
  implicit class EncryptionKeySignatureLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, EncryptionKeySignature]) extends com.trueaccord.lenses.ObjectLens[UpperPB, EncryptionKeySignature](_l) {
    def keyId: com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.keyId)((c_, f_) => c_.copy(keyId = f_))
    def alg: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.alg)((c_, f_) => c_.copy(alg = f_))
    def signature: com.trueaccord.lenses.Lens[UpperPB, com.google.protobuf.ByteString] = field(_.signature)((c_, f_) => c_.copy(signature = f_))
  }
  final val KEYID_FIELD_NUMBER = 1
  final val ALG_FIELD_NUMBER = 2
  final val SIGNATURE_FIELD_NUMBER = 3
}
