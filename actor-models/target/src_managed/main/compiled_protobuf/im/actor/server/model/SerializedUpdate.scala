// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package im.actor.server.model


import im.actor.server.model.ModelTypeMappers._

@SerialVersionUID(0L)
final case class SerializedUpdate(
    header: Int = 0,
    body: com.google.protobuf.ByteString = com.google.protobuf.ByteString.EMPTY,
    userIds: Seq[Int] = Nil,
    groupIds: Seq[Int] = Nil
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[SerializedUpdate] with com.trueaccord.lenses.Updatable[SerializedUpdate] {
    lazy val userIdsSerializedSize =
      userIds.map(com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag).sum
    lazy val groupIdsSerializedSize =
      groupIds.map(com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag).sum
    @transient
    lazy val serializedSize: Int = {
      var __size = 0
      if (header != 0) { __size += com.google.protobuf.CodedOutputStream.computeInt32Size(1, header) }
      if (body != com.google.protobuf.ByteString.EMPTY) { __size += com.google.protobuf.CodedOutputStream.computeBytesSize(2, body) }
      if(userIds.nonEmpty) {
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(userIdsSerializedSize) + userIdsSerializedSize
      }
      if(groupIds.nonEmpty) {
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(groupIdsSerializedSize) + groupIdsSerializedSize
      }
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = header
        if (__v != 0) {
          output.writeInt32(1, __v)
        }
      };
      {
        val __v = body
        if (__v != com.google.protobuf.ByteString.EMPTY) {
          output.writeBytes(2, __v)
        }
      };
      if (userIds.nonEmpty) {
        output.writeTag(3, 2)
        output.writeRawVarint32(userIdsSerializedSize)
        userIds.foreach(output.writeInt32NoTag)
      };
      if (groupIds.nonEmpty) {
        output.writeTag(4, 2)
        output.writeRawVarint32(groupIdsSerializedSize)
        groupIds.foreach(output.writeInt32NoTag)
      };
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): im.actor.server.model.SerializedUpdate = {
      var __header = this.header
      var __body = this.body
      val __userIds = (scala.collection.immutable.Vector.newBuilder[Int] ++= this.userIds)
      val __groupIds = (scala.collection.immutable.Vector.newBuilder[Int] ++= this.groupIds)
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __header = __input.readInt32()
          case 18 =>
            __body = __input.readBytes()
          case 26 => {
            val length = __input.readRawVarint32()
            val oldLimit = __input.pushLimit(length)
            while (__input.getBytesUntilLimit > 0) {
              __userIds += __input.readInt32
            }
            __input.popLimit(oldLimit)
          }
          case 34 => {
            val length = __input.readRawVarint32()
            val oldLimit = __input.pushLimit(length)
            while (__input.getBytesUntilLimit > 0) {
              __groupIds += __input.readInt32
            }
            __input.popLimit(oldLimit)
          }
          case tag => __input.skipField(tag)
        }
      }
      im.actor.server.model.SerializedUpdate(
          header = __header,
          body = __body,
          userIds = __userIds.result(),
          groupIds = __groupIds.result()
      )
    }
    def withHeader(__v: Int): SerializedUpdate = copy(header = __v)
    def withBody(__v: com.google.protobuf.ByteString): SerializedUpdate = copy(body = __v)
    def clearUserIds = copy(userIds = Seq.empty)
    def addUserIds(__vs: Int*): SerializedUpdate = addAllUserIds(__vs)
    def addAllUserIds(__vs: TraversableOnce[Int]): SerializedUpdate = copy(userIds = userIds ++ __vs)
    def withUserIds(__v: Seq[Int]): SerializedUpdate = copy(userIds = __v)
    def clearGroupIds = copy(groupIds = Seq.empty)
    def addGroupIds(__vs: Int*): SerializedUpdate = addAllGroupIds(__vs)
    def addAllGroupIds(__vs: TraversableOnce[Int]): SerializedUpdate = copy(groupIds = groupIds ++ __vs)
    def withGroupIds(__v: Seq[Int]): SerializedUpdate = copy(groupIds = __v)
    def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
      __field.getNumber match {
        case 1 => {
          val __t = header
          if (__t != 0) __t else null
        }
        case 2 => {
          val __t = body
          if (__t != com.google.protobuf.ByteString.EMPTY) __t else null
        }
        case 3 => userIds
        case 4 => groupIds
      }
    }
    override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = im.actor.server.model.SerializedUpdate
}

object SerializedUpdate extends com.trueaccord.scalapb.GeneratedMessageCompanion[SerializedUpdate]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[SerializedUpdate]  = this
  def fromFieldsMap(__fieldsMap: Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): im.actor.server.model.SerializedUpdate = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    im.actor.server.model.SerializedUpdate(
      __fieldsMap.getOrElse(__fields.get(0), 0).asInstanceOf[Int],
      __fieldsMap.getOrElse(__fields.get(1), com.google.protobuf.ByteString.EMPTY).asInstanceOf[com.google.protobuf.ByteString],
      __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[Seq[Int]],
      __fieldsMap.getOrElse(__fields.get(3), Nil).asInstanceOf[Seq[Int]]
    )
  }
  def descriptor: com.google.protobuf.Descriptors.Descriptor = ModelProto.descriptor.getMessageTypes.get(0)
  def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__field)
  def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
  lazy val defaultInstance = im.actor.server.model.SerializedUpdate(
  )
  implicit class SerializedUpdateLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, SerializedUpdate]) extends com.trueaccord.lenses.ObjectLens[UpperPB, SerializedUpdate](_l) {
    def header: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.header)((c_, f_) => c_.copy(header = f_))
    def body: com.trueaccord.lenses.Lens[UpperPB, com.google.protobuf.ByteString] = field(_.body)((c_, f_) => c_.copy(body = f_))
    def userIds: com.trueaccord.lenses.Lens[UpperPB, Seq[Int]] = field(_.userIds)((c_, f_) => c_.copy(userIds = f_))
    def groupIds: com.trueaccord.lenses.Lens[UpperPB, Seq[Int]] = field(_.groupIds)((c_, f_) => c_.copy(groupIds = f_))
  }
  final val HEADER_FIELD_NUMBER = 1
  final val BODY_FIELD_NUMBER = 2
  final val USER_IDS_FIELD_NUMBER = 3
  final val GROUP_IDS_FIELD_NUMBER = 4
}
