// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package im.actor.server.model.encryption



@SerialVersionUID(0L)
final case class EncryptionKey(
    id: Long = 0L,
    alg: String = "",
    material: com.google.protobuf.ByteString = com.google.protobuf.ByteString.EMPTY,
    hash: com.google.protobuf.ByteString = com.google.protobuf.ByteString.EMPTY
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[EncryptionKey] with com.trueaccord.lenses.Updatable[EncryptionKey] {
    @transient
    lazy val serializedSize: Int = {
      var __size = 0
      if (id != 0L) { __size += com.google.protobuf.CodedOutputStream.computeInt64Size(1, id) }
      if (alg != "") { __size += com.google.protobuf.CodedOutputStream.computeStringSize(3, alg) }
      if (material != com.google.protobuf.ByteString.EMPTY) { __size += com.google.protobuf.CodedOutputStream.computeBytesSize(4, material) }
      if (hash != com.google.protobuf.ByteString.EMPTY) { __size += com.google.protobuf.CodedOutputStream.computeBytesSize(5, hash) }
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = id
        if (__v != 0L) {
          output.writeInt64(1, __v)
        }
      };
      {
        val __v = alg
        if (__v != "") {
          output.writeString(3, __v)
        }
      };
      {
        val __v = material
        if (__v != com.google.protobuf.ByteString.EMPTY) {
          output.writeBytes(4, __v)
        }
      };
      {
        val __v = hash
        if (__v != com.google.protobuf.ByteString.EMPTY) {
          output.writeBytes(5, __v)
        }
      };
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): im.actor.server.model.encryption.EncryptionKey = {
      var __id = this.id
      var __alg = this.alg
      var __material = this.material
      var __hash = this.hash
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __id = __input.readInt64()
          case 26 =>
            __alg = __input.readString()
          case 34 =>
            __material = __input.readBytes()
          case 42 =>
            __hash = __input.readBytes()
          case tag => __input.skipField(tag)
        }
      }
      im.actor.server.model.encryption.EncryptionKey(
          id = __id,
          alg = __alg,
          material = __material,
          hash = __hash
      )
    }
    def withId(__v: Long): EncryptionKey = copy(id = __v)
    def withAlg(__v: String): EncryptionKey = copy(alg = __v)
    def withMaterial(__v: com.google.protobuf.ByteString): EncryptionKey = copy(material = __v)
    def withHash(__v: com.google.protobuf.ByteString): EncryptionKey = copy(hash = __v)
    def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
      __field.getNumber match {
        case 1 => {
          val __t = id
          if (__t != 0L) __t else null
        }
        case 3 => {
          val __t = alg
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = material
          if (__t != com.google.protobuf.ByteString.EMPTY) __t else null
        }
        case 5 => {
          val __t = hash
          if (__t != com.google.protobuf.ByteString.EMPTY) __t else null
        }
      }
    }
    override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = im.actor.server.model.encryption.EncryptionKey
}

object EncryptionKey extends com.trueaccord.scalapb.GeneratedMessageCompanion[EncryptionKey]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[EncryptionKey]  = this
  def fromFieldsMap(__fieldsMap: Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): im.actor.server.model.encryption.EncryptionKey = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    im.actor.server.model.encryption.EncryptionKey(
      __fieldsMap.getOrElse(__fields.get(0), 0L).asInstanceOf[Long],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(2), com.google.protobuf.ByteString.EMPTY).asInstanceOf[com.google.protobuf.ByteString],
      __fieldsMap.getOrElse(__fields.get(3), com.google.protobuf.ByteString.EMPTY).asInstanceOf[com.google.protobuf.ByteString]
    )
  }
  def descriptor: com.google.protobuf.Descriptors.Descriptor = ModelEncryptionProto.descriptor.getMessageTypes.get(0)
  def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__field)
  def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
  lazy val defaultInstance = im.actor.server.model.encryption.EncryptionKey(
  )
  implicit class EncryptionKeyLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, EncryptionKey]) extends com.trueaccord.lenses.ObjectLens[UpperPB, EncryptionKey](_l) {
    def id: com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def alg: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.alg)((c_, f_) => c_.copy(alg = f_))
    def material: com.trueaccord.lenses.Lens[UpperPB, com.google.protobuf.ByteString] = field(_.material)((c_, f_) => c_.copy(material = f_))
    def hash: com.trueaccord.lenses.Lens[UpperPB, com.google.protobuf.ByteString] = field(_.hash)((c_, f_) => c_.copy(hash = f_))
  }
  final val ID_FIELD_NUMBER = 1
  final val ALG_FIELD_NUMBER = 3
  final val MATERIAL_FIELD_NUMBER = 4
  final val HASH_FIELD_NUMBER = 5
}
