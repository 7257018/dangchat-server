// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package im.actor.server.model


import im.actor.server.model.ModelTypeMappers._

@SerialVersionUID(0L)
final case class ReactionEvent(
    dialogType: Int = 0,
    dialogId: String = "",
    randomId: Long = 0L,
    code: String = "",
    userId: Int = 0
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[ReactionEvent] with com.trueaccord.lenses.Updatable[ReactionEvent] {
    @transient
    lazy val serializedSize: Int = {
      var __size = 0
      if (dialogType != 0) { __size += com.google.protobuf.CodedOutputStream.computeInt32Size(1, dialogType) }
      if (dialogId != "") { __size += com.google.protobuf.CodedOutputStream.computeStringSize(5, dialogId) }
      if (randomId != 0L) { __size += com.google.protobuf.CodedOutputStream.computeInt64Size(2, randomId) }
      if (code != "") { __size += com.google.protobuf.CodedOutputStream.computeStringSize(3, code) }
      if (userId != 0) { __size += com.google.protobuf.CodedOutputStream.computeInt32Size(4, userId) }
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = dialogType
        if (__v != 0) {
          output.writeInt32(1, __v)
        }
      };
      {
        val __v = randomId
        if (__v != 0L) {
          output.writeInt64(2, __v)
        }
      };
      {
        val __v = code
        if (__v != "") {
          output.writeString(3, __v)
        }
      };
      {
        val __v = userId
        if (__v != 0) {
          output.writeInt32(4, __v)
        }
      };
      {
        val __v = dialogId
        if (__v != "") {
          output.writeString(5, __v)
        }
      };
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): im.actor.server.model.ReactionEvent = {
      var __dialogType = this.dialogType
      var __dialogId = this.dialogId
      var __randomId = this.randomId
      var __code = this.code
      var __userId = this.userId
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __dialogType = __input.readInt32()
          case 42 =>
            __dialogId = __input.readString()
          case 16 =>
            __randomId = __input.readInt64()
          case 26 =>
            __code = __input.readString()
          case 32 =>
            __userId = __input.readInt32()
          case tag => __input.skipField(tag)
        }
      }
      im.actor.server.model.ReactionEvent(
          dialogType = __dialogType,
          dialogId = __dialogId,
          randomId = __randomId,
          code = __code,
          userId = __userId
      )
    }
    def withDialogType(__v: Int): ReactionEvent = copy(dialogType = __v)
    def withDialogId(__v: String): ReactionEvent = copy(dialogId = __v)
    def withRandomId(__v: Long): ReactionEvent = copy(randomId = __v)
    def withCode(__v: String): ReactionEvent = copy(code = __v)
    def withUserId(__v: Int): ReactionEvent = copy(userId = __v)
    def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
      __field.getNumber match {
        case 1 => {
          val __t = dialogType
          if (__t != 0) __t else null
        }
        case 5 => {
          val __t = dialogId
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = randomId
          if (__t != 0L) __t else null
        }
        case 3 => {
          val __t = code
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = userId
          if (__t != 0) __t else null
        }
      }
    }
    override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = im.actor.server.model.ReactionEvent
}

object ReactionEvent extends com.trueaccord.scalapb.GeneratedMessageCompanion[ReactionEvent]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[ReactionEvent]  = this
  def fromFieldsMap(__fieldsMap: Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): im.actor.server.model.ReactionEvent = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    im.actor.server.model.ReactionEvent(
      __fieldsMap.getOrElse(__fields.get(0), 0).asInstanceOf[Int],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(2), 0L).asInstanceOf[Long],
      __fieldsMap.getOrElse(__fields.get(3), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(4), 0).asInstanceOf[Int]
    )
  }
  def descriptor: com.google.protobuf.Descriptors.Descriptor = ModelProto.descriptor.getMessageTypes.get(5)
  def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__field)
  def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
  lazy val defaultInstance = im.actor.server.model.ReactionEvent(
  )
  implicit class ReactionEventLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, ReactionEvent]) extends com.trueaccord.lenses.ObjectLens[UpperPB, ReactionEvent](_l) {
    def dialogType: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.dialogType)((c_, f_) => c_.copy(dialogType = f_))
    def dialogId: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.dialogId)((c_, f_) => c_.copy(dialogId = f_))
    def randomId: com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.randomId)((c_, f_) => c_.copy(randomId = f_))
    def code: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.code)((c_, f_) => c_.copy(code = f_))
    def userId: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.userId)((c_, f_) => c_.copy(userId = f_))
  }
  final val DIALOG_TYPE_FIELD_NUMBER = 1
  final val DIALOG_ID_FIELD_NUMBER = 5
  final val RANDOM_ID_FIELD_NUMBER = 2
  final val CODE_FIELD_NUMBER = 3
  final val USER_ID_FIELD_NUMBER = 4
}
