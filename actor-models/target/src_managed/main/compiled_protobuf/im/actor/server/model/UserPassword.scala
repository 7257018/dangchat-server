// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package im.actor.server.model


import im.actor.server.model.ModelTypeMappers._

@SerialVersionUID(0L)
final case class UserPassword(
    userId: Int = 0,
    hash: com.google.protobuf.ByteString = com.google.protobuf.ByteString.EMPTY,
    salt: com.google.protobuf.ByteString = com.google.protobuf.ByteString.EMPTY
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[UserPassword] with com.trueaccord.lenses.Updatable[UserPassword] {
    @transient
    lazy val serializedSize: Int = {
      var __size = 0
      if (userId != 0) { __size += com.google.protobuf.CodedOutputStream.computeInt32Size(1, userId) }
      if (hash != com.google.protobuf.ByteString.EMPTY) { __size += com.google.protobuf.CodedOutputStream.computeBytesSize(2, hash) }
      if (salt != com.google.protobuf.ByteString.EMPTY) { __size += com.google.protobuf.CodedOutputStream.computeBytesSize(3, salt) }
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = userId
        if (__v != 0) {
          output.writeInt32(1, __v)
        }
      };
      {
        val __v = hash
        if (__v != com.google.protobuf.ByteString.EMPTY) {
          output.writeBytes(2, __v)
        }
      };
      {
        val __v = salt
        if (__v != com.google.protobuf.ByteString.EMPTY) {
          output.writeBytes(3, __v)
        }
      };
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): im.actor.server.model.UserPassword = {
      var __userId = this.userId
      var __hash = this.hash
      var __salt = this.salt
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __userId = __input.readInt32()
          case 18 =>
            __hash = __input.readBytes()
          case 26 =>
            __salt = __input.readBytes()
          case tag => __input.skipField(tag)
        }
      }
      im.actor.server.model.UserPassword(
          userId = __userId,
          hash = __hash,
          salt = __salt
      )
    }
    def withUserId(__v: Int): UserPassword = copy(userId = __v)
    def withHash(__v: com.google.protobuf.ByteString): UserPassword = copy(hash = __v)
    def withSalt(__v: com.google.protobuf.ByteString): UserPassword = copy(salt = __v)
    def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
      __field.getNumber match {
        case 1 => {
          val __t = userId
          if (__t != 0) __t else null
        }
        case 2 => {
          val __t = hash
          if (__t != com.google.protobuf.ByteString.EMPTY) __t else null
        }
        case 3 => {
          val __t = salt
          if (__t != com.google.protobuf.ByteString.EMPTY) __t else null
        }
      }
    }
    override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = im.actor.server.model.UserPassword
}

object UserPassword extends com.trueaccord.scalapb.GeneratedMessageCompanion[UserPassword]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[UserPassword]  = this
  def fromFieldsMap(__fieldsMap: Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): im.actor.server.model.UserPassword = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    im.actor.server.model.UserPassword(
      __fieldsMap.getOrElse(__fields.get(0), 0).asInstanceOf[Int],
      __fieldsMap.getOrElse(__fields.get(1), com.google.protobuf.ByteString.EMPTY).asInstanceOf[com.google.protobuf.ByteString],
      __fieldsMap.getOrElse(__fields.get(2), com.google.protobuf.ByteString.EMPTY).asInstanceOf[com.google.protobuf.ByteString]
    )
  }
  def descriptor: com.google.protobuf.Descriptors.Descriptor = ModelProto.descriptor.getMessageTypes.get(8)
  def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__field)
  def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
  lazy val defaultInstance = im.actor.server.model.UserPassword(
  )
  implicit class UserPasswordLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, UserPassword]) extends com.trueaccord.lenses.ObjectLens[UpperPB, UserPassword](_l) {
    def userId: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.userId)((c_, f_) => c_.copy(userId = f_))
    def hash: com.trueaccord.lenses.Lens[UpperPB, com.google.protobuf.ByteString] = field(_.hash)((c_, f_) => c_.copy(hash = f_))
    def salt: com.trueaccord.lenses.Lens[UpperPB, com.google.protobuf.ByteString] = field(_.salt)((c_, f_) => c_.copy(salt = f_))
  }
  final val USER_ID_FIELD_NUMBER = 1
  final val HASH_FIELD_NUMBER = 2
  final val SALT_FIELD_NUMBER = 3
}
