// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package im.actor.server.model


import im.actor.server.model.ModelTypeMappers._

@SerialVersionUID(0L)
final case class HttpApiToken(
    token: String = "",
    isAdmin: Boolean = false
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[HttpApiToken] with com.trueaccord.lenses.Updatable[HttpApiToken] {
    @transient
    lazy val serializedSize: Int = {
      var __size = 0
      if (token != "") { __size += com.google.protobuf.CodedOutputStream.computeStringSize(1, token) }
      if (isAdmin != false) { __size += com.google.protobuf.CodedOutputStream.computeBoolSize(2, isAdmin) }
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = token
        if (__v != "") {
          output.writeString(1, __v)
        }
      };
      {
        val __v = isAdmin
        if (__v != false) {
          output.writeBool(2, __v)
        }
      };
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): im.actor.server.model.HttpApiToken = {
      var __token = this.token
      var __isAdmin = this.isAdmin
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __token = __input.readString()
          case 16 =>
            __isAdmin = __input.readBool()
          case tag => __input.skipField(tag)
        }
      }
      im.actor.server.model.HttpApiToken(
          token = __token,
          isAdmin = __isAdmin
      )
    }
    def withToken(__v: String): HttpApiToken = copy(token = __v)
    def withIsAdmin(__v: Boolean): HttpApiToken = copy(isAdmin = __v)
    def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
      __field.getNumber match {
        case 1 => {
          val __t = token
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = isAdmin
          if (__t != false) __t else null
        }
      }
    }
    override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = im.actor.server.model.HttpApiToken
}

object HttpApiToken extends com.trueaccord.scalapb.GeneratedMessageCompanion[HttpApiToken]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[HttpApiToken]  = this
  def fromFieldsMap(__fieldsMap: Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): im.actor.server.model.HttpApiToken = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    im.actor.server.model.HttpApiToken(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(1), false).asInstanceOf[Boolean]
    )
  }
  def descriptor: com.google.protobuf.Descriptors.Descriptor = ModelProto.descriptor.getMessageTypes.get(7)
  def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__field)
  def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
  lazy val defaultInstance = im.actor.server.model.HttpApiToken(
  )
  implicit class HttpApiTokenLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, HttpApiToken]) extends com.trueaccord.lenses.ObjectLens[UpperPB, HttpApiToken](_l) {
    def token: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.token)((c_, f_) => c_.copy(token = f_))
    def isAdmin: com.trueaccord.lenses.Lens[UpperPB, Boolean] = field(_.isAdmin)((c_, f_) => c_.copy(isAdmin = f_))
  }
  final val TOKEN_FIELD_NUMBER = 1
  final val IS_ADMIN_FIELD_NUMBER = 2
}
