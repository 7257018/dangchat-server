// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package im.actor.server.model


import im.actor.server.model.ModelTypeMappers._

@SerialVersionUID(0L)
final case class MessageReaction(
    userIds: Seq[Int] = Nil,
    code: String = ""
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[MessageReaction] with com.trueaccord.lenses.Updatable[MessageReaction] {
    lazy val userIdsSerializedSize =
      userIds.map(com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag).sum
    @transient
    lazy val serializedSize: Int = {
      var __size = 0
      if(userIds.nonEmpty) {
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(userIdsSerializedSize) + userIdsSerializedSize
      }
      if (code != "") { __size += com.google.protobuf.CodedOutputStream.computeStringSize(4, code) }
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      if (userIds.nonEmpty) {
        output.writeTag(3, 2)
        output.writeRawVarint32(userIdsSerializedSize)
        userIds.foreach(output.writeInt32NoTag)
      };
      {
        val __v = code
        if (__v != "") {
          output.writeString(4, __v)
        }
      };
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): im.actor.server.model.MessageReaction = {
      val __userIds = (scala.collection.immutable.Vector.newBuilder[Int] ++= this.userIds)
      var __code = this.code
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 26 => {
            val length = __input.readRawVarint32()
            val oldLimit = __input.pushLimit(length)
            while (__input.getBytesUntilLimit > 0) {
              __userIds += __input.readInt32
            }
            __input.popLimit(oldLimit)
          }
          case 34 =>
            __code = __input.readString()
          case tag => __input.skipField(tag)
        }
      }
      im.actor.server.model.MessageReaction(
          userIds = __userIds.result(),
          code = __code
      )
    }
    def clearUserIds = copy(userIds = Seq.empty)
    def addUserIds(__vs: Int*): MessageReaction = addAllUserIds(__vs)
    def addAllUserIds(__vs: TraversableOnce[Int]): MessageReaction = copy(userIds = userIds ++ __vs)
    def withUserIds(__v: Seq[Int]): MessageReaction = copy(userIds = __v)
    def withCode(__v: String): MessageReaction = copy(code = __v)
    def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
      __field.getNumber match {
        case 3 => userIds
        case 4 => {
          val __t = code
          if (__t != "") __t else null
        }
      }
    }
    override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = im.actor.server.model.MessageReaction
}

object MessageReaction extends com.trueaccord.scalapb.GeneratedMessageCompanion[MessageReaction]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[MessageReaction]  = this
  def fromFieldsMap(__fieldsMap: Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): im.actor.server.model.MessageReaction = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    im.actor.server.model.MessageReaction(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[Seq[Int]],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[String]
    )
  }
  def descriptor: com.google.protobuf.Descriptors.Descriptor = ModelProto.descriptor.getMessageTypes.get(6)
  def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__field)
  def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
  lazy val defaultInstance = im.actor.server.model.MessageReaction(
  )
  implicit class MessageReactionLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, MessageReaction]) extends com.trueaccord.lenses.ObjectLens[UpperPB, MessageReaction](_l) {
    def userIds: com.trueaccord.lenses.Lens[UpperPB, Seq[Int]] = field(_.userIds)((c_, f_) => c_.copy(userIds = f_))
    def code: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.code)((c_, f_) => c_.copy(code = f_))
  }
  final val USER_IDS_FIELD_NUMBER = 3
  final val CODE_FIELD_NUMBER = 4
}
