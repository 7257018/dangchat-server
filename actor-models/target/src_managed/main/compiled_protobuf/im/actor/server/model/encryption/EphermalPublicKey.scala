// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package im.actor.server.model.encryption



@SerialVersionUID(0L)
final case class EphermalPublicKey(
    userId: Int = 0,
    keyGroupId: Int = 0,
    key: Option[im.actor.server.model.encryption.EncryptionKey] = None,
    signatures: Seq[im.actor.server.model.encryption.EncryptionKeySignature] = Nil
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[EphermalPublicKey] with com.trueaccord.lenses.Updatable[EphermalPublicKey] {
    @transient
    lazy val serializedSize: Int = {
      var __size = 0
      if (userId != 0) { __size += com.google.protobuf.CodedOutputStream.computeInt32Size(1, userId) }
      if (keyGroupId != 0) { __size += com.google.protobuf.CodedOutputStream.computeInt32Size(2, keyGroupId) }
      if (key.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(key.get.serializedSize) + key.get.serializedSize }
      signatures.foreach(signatures => __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(signatures.serializedSize) + signatures.serializedSize)
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = userId
        if (__v != 0) {
          output.writeInt32(1, __v)
        }
      };
      {
        val __v = keyGroupId
        if (__v != 0) {
          output.writeInt32(2, __v)
        }
      };
      key.foreach { __v => 
        output.writeTag(3, 2)
        output.writeRawVarint32(__v.serializedSize)
        __v.writeTo(output)
      };
      signatures.foreach { __v => 
        output.writeTag(4, 2)
        output.writeRawVarint32(__v.serializedSize)
        __v.writeTo(output)
      };
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): im.actor.server.model.encryption.EphermalPublicKey = {
      var __userId = this.userId
      var __keyGroupId = this.keyGroupId
      var __key = this.key
      val __signatures = (scala.collection.immutable.Vector.newBuilder[im.actor.server.model.encryption.EncryptionKeySignature] ++= this.signatures)
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __userId = __input.readInt32()
          case 16 =>
            __keyGroupId = __input.readInt32()
          case 26 =>
            __key = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __key.getOrElse(im.actor.server.model.encryption.EncryptionKey.defaultInstance)))
          case 34 =>
            __signatures += com.trueaccord.scalapb.LiteParser.readMessage(__input, im.actor.server.model.encryption.EncryptionKeySignature.defaultInstance)
          case tag => __input.skipField(tag)
        }
      }
      im.actor.server.model.encryption.EphermalPublicKey(
          userId = __userId,
          keyGroupId = __keyGroupId,
          key = __key,
          signatures = __signatures.result()
      )
    }
    def withUserId(__v: Int): EphermalPublicKey = copy(userId = __v)
    def withKeyGroupId(__v: Int): EphermalPublicKey = copy(keyGroupId = __v)
    def getKey: im.actor.server.model.encryption.EncryptionKey = key.getOrElse(im.actor.server.model.encryption.EncryptionKey.defaultInstance)
    def clearKey: EphermalPublicKey = copy(key = None)
    def withKey(__v: im.actor.server.model.encryption.EncryptionKey): EphermalPublicKey = copy(key = Some(__v))
    def clearSignatures = copy(signatures = Seq.empty)
    def addSignatures(__vs: im.actor.server.model.encryption.EncryptionKeySignature*): EphermalPublicKey = addAllSignatures(__vs)
    def addAllSignatures(__vs: TraversableOnce[im.actor.server.model.encryption.EncryptionKeySignature]): EphermalPublicKey = copy(signatures = signatures ++ __vs)
    def withSignatures(__v: Seq[im.actor.server.model.encryption.EncryptionKeySignature]): EphermalPublicKey = copy(signatures = __v)
    def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
      __field.getNumber match {
        case 1 => {
          val __t = userId
          if (__t != 0) __t else null
        }
        case 2 => {
          val __t = keyGroupId
          if (__t != 0) __t else null
        }
        case 3 => key.getOrElse(null)
        case 4 => signatures
      }
    }
    override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = im.actor.server.model.encryption.EphermalPublicKey
}

object EphermalPublicKey extends com.trueaccord.scalapb.GeneratedMessageCompanion[EphermalPublicKey]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[EphermalPublicKey]  = this
  def fromFieldsMap(__fieldsMap: Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): im.actor.server.model.encryption.EphermalPublicKey = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    im.actor.server.model.encryption.EphermalPublicKey(
      __fieldsMap.getOrElse(__fields.get(0), 0).asInstanceOf[Int],
      __fieldsMap.getOrElse(__fields.get(1), 0).asInstanceOf[Int],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[Option[im.actor.server.model.encryption.EncryptionKey]],
      __fieldsMap.getOrElse(__fields.get(3), Nil).asInstanceOf[Seq[im.actor.server.model.encryption.EncryptionKeySignature]]
    )
  }
  def descriptor: com.google.protobuf.Descriptors.Descriptor = ModelEncryptionProto.descriptor.getMessageTypes.get(3)
  def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    require(__field.getContainingType() == descriptor, "FieldDescriptor does not match message type.")
    var __out: com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    __field.getNumber match {
      case 3 => __out = im.actor.server.model.encryption.EncryptionKey
      case 4 => __out = im.actor.server.model.encryption.EncryptionKeySignature
    }
  __out
  }
  def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
  lazy val defaultInstance = im.actor.server.model.encryption.EphermalPublicKey(
  )
  implicit class EphermalPublicKeyLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, EphermalPublicKey]) extends com.trueaccord.lenses.ObjectLens[UpperPB, EphermalPublicKey](_l) {
    def userId: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.userId)((c_, f_) => c_.copy(userId = f_))
    def keyGroupId: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.keyGroupId)((c_, f_) => c_.copy(keyGroupId = f_))
    def key: com.trueaccord.lenses.Lens[UpperPB, im.actor.server.model.encryption.EncryptionKey] = field(_.getKey)((c_, f_) => c_.copy(key = Some(f_)))
    def optionalKey: com.trueaccord.lenses.Lens[UpperPB, Option[im.actor.server.model.encryption.EncryptionKey]] = field(_.key)((c_, f_) => c_.copy(key = f_))
    def signatures: com.trueaccord.lenses.Lens[UpperPB, Seq[im.actor.server.model.encryption.EncryptionKeySignature]] = field(_.signatures)((c_, f_) => c_.copy(signatures = f_))
  }
  final val USER_ID_FIELD_NUMBER = 1
  final val KEY_GROUP_ID_FIELD_NUMBER = 2
  final val KEY_FIELD_NUMBER = 3
  final val SIGNATURES_FIELD_NUMBER = 4
}
