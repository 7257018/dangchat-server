// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package im.actor.server.model.encryption



@SerialVersionUID(0L)
final case class EncryptionKeyGroup(
    userId: Int = 0,
    id: Int = 0,
    authIds: Seq[Long] = Nil,
    supportedEncryptions: Seq[String] = Nil,
    identityKey: Option[im.actor.server.model.encryption.EncryptionKey] = None,
    keys: Seq[im.actor.server.model.encryption.EncryptionKey] = Nil,
    signatures: Seq[im.actor.server.model.encryption.EncryptionKeySignature] = Nil
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[EncryptionKeyGroup] with com.trueaccord.lenses.Updatable[EncryptionKeyGroup] {
    lazy val authIdsSerializedSize =
      authIds.map(com.google.protobuf.CodedOutputStream.computeInt64SizeNoTag).sum
    @transient
    lazy val serializedSize: Int = {
      var __size = 0
      if (userId != 0) { __size += com.google.protobuf.CodedOutputStream.computeInt32Size(1, userId) }
      if (id != 0) { __size += com.google.protobuf.CodedOutputStream.computeInt32Size(2, id) }
      if(authIds.nonEmpty) {
        __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(authIdsSerializedSize) + authIdsSerializedSize
      }
      supportedEncryptions.foreach(supportedEncryptions => __size += com.google.protobuf.CodedOutputStream.computeStringSize(6, supportedEncryptions))
      if (identityKey.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(identityKey.get.serializedSize) + identityKey.get.serializedSize }
      keys.foreach(keys => __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(keys.serializedSize) + keys.serializedSize)
      signatures.foreach(signatures => __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(signatures.serializedSize) + signatures.serializedSize)
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = userId
        if (__v != 0) {
          output.writeInt32(1, __v)
        }
      };
      {
        val __v = id
        if (__v != 0) {
          output.writeInt32(2, __v)
        }
      };
      identityKey.foreach { __v => 
        output.writeTag(3, 2)
        output.writeRawVarint32(__v.serializedSize)
        __v.writeTo(output)
      };
      keys.foreach { __v => 
        output.writeTag(4, 2)
        output.writeRawVarint32(__v.serializedSize)
        __v.writeTo(output)
      };
      signatures.foreach { __v => 
        output.writeTag(5, 2)
        output.writeRawVarint32(__v.serializedSize)
        __v.writeTo(output)
      };
      supportedEncryptions.foreach { __v => 
        output.writeString(6, __v)
      };
      if (authIds.nonEmpty) {
        output.writeTag(7, 2)
        output.writeRawVarint32(authIdsSerializedSize)
        authIds.foreach(output.writeInt64NoTag)
      };
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): im.actor.server.model.encryption.EncryptionKeyGroup = {
      var __userId = this.userId
      var __id = this.id
      val __authIds = (scala.collection.immutable.Vector.newBuilder[Long] ++= this.authIds)
      val __supportedEncryptions = (scala.collection.immutable.Vector.newBuilder[String] ++= this.supportedEncryptions)
      var __identityKey = this.identityKey
      val __keys = (scala.collection.immutable.Vector.newBuilder[im.actor.server.model.encryption.EncryptionKey] ++= this.keys)
      val __signatures = (scala.collection.immutable.Vector.newBuilder[im.actor.server.model.encryption.EncryptionKeySignature] ++= this.signatures)
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __userId = __input.readInt32()
          case 16 =>
            __id = __input.readInt32()
          case 58 => {
            val length = __input.readRawVarint32()
            val oldLimit = __input.pushLimit(length)
            while (__input.getBytesUntilLimit > 0) {
              __authIds += __input.readInt64
            }
            __input.popLimit(oldLimit)
          }
          case 50 =>
            __supportedEncryptions += __input.readString()
          case 26 =>
            __identityKey = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __identityKey.getOrElse(im.actor.server.model.encryption.EncryptionKey.defaultInstance)))
          case 34 =>
            __keys += com.trueaccord.scalapb.LiteParser.readMessage(__input, im.actor.server.model.encryption.EncryptionKey.defaultInstance)
          case 42 =>
            __signatures += com.trueaccord.scalapb.LiteParser.readMessage(__input, im.actor.server.model.encryption.EncryptionKeySignature.defaultInstance)
          case tag => __input.skipField(tag)
        }
      }
      im.actor.server.model.encryption.EncryptionKeyGroup(
          userId = __userId,
          id = __id,
          authIds = __authIds.result(),
          supportedEncryptions = __supportedEncryptions.result(),
          identityKey = __identityKey,
          keys = __keys.result(),
          signatures = __signatures.result()
      )
    }
    def withUserId(__v: Int): EncryptionKeyGroup = copy(userId = __v)
    def withId(__v: Int): EncryptionKeyGroup = copy(id = __v)
    def clearAuthIds = copy(authIds = Seq.empty)
    def addAuthIds(__vs: Long*): EncryptionKeyGroup = addAllAuthIds(__vs)
    def addAllAuthIds(__vs: TraversableOnce[Long]): EncryptionKeyGroup = copy(authIds = authIds ++ __vs)
    def withAuthIds(__v: Seq[Long]): EncryptionKeyGroup = copy(authIds = __v)
    def clearSupportedEncryptions = copy(supportedEncryptions = Seq.empty)
    def addSupportedEncryptions(__vs: String*): EncryptionKeyGroup = addAllSupportedEncryptions(__vs)
    def addAllSupportedEncryptions(__vs: TraversableOnce[String]): EncryptionKeyGroup = copy(supportedEncryptions = supportedEncryptions ++ __vs)
    def withSupportedEncryptions(__v: Seq[String]): EncryptionKeyGroup = copy(supportedEncryptions = __v)
    def getIdentityKey: im.actor.server.model.encryption.EncryptionKey = identityKey.getOrElse(im.actor.server.model.encryption.EncryptionKey.defaultInstance)
    def clearIdentityKey: EncryptionKeyGroup = copy(identityKey = None)
    def withIdentityKey(__v: im.actor.server.model.encryption.EncryptionKey): EncryptionKeyGroup = copy(identityKey = Some(__v))
    def clearKeys = copy(keys = Seq.empty)
    def addKeys(__vs: im.actor.server.model.encryption.EncryptionKey*): EncryptionKeyGroup = addAllKeys(__vs)
    def addAllKeys(__vs: TraversableOnce[im.actor.server.model.encryption.EncryptionKey]): EncryptionKeyGroup = copy(keys = keys ++ __vs)
    def withKeys(__v: Seq[im.actor.server.model.encryption.EncryptionKey]): EncryptionKeyGroup = copy(keys = __v)
    def clearSignatures = copy(signatures = Seq.empty)
    def addSignatures(__vs: im.actor.server.model.encryption.EncryptionKeySignature*): EncryptionKeyGroup = addAllSignatures(__vs)
    def addAllSignatures(__vs: TraversableOnce[im.actor.server.model.encryption.EncryptionKeySignature]): EncryptionKeyGroup = copy(signatures = signatures ++ __vs)
    def withSignatures(__v: Seq[im.actor.server.model.encryption.EncryptionKeySignature]): EncryptionKeyGroup = copy(signatures = __v)
    def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
      __field.getNumber match {
        case 1 => {
          val __t = userId
          if (__t != 0) __t else null
        }
        case 2 => {
          val __t = id
          if (__t != 0) __t else null
        }
        case 7 => authIds
        case 6 => supportedEncryptions
        case 3 => identityKey.getOrElse(null)
        case 4 => keys
        case 5 => signatures
      }
    }
    override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = im.actor.server.model.encryption.EncryptionKeyGroup
}

object EncryptionKeyGroup extends com.trueaccord.scalapb.GeneratedMessageCompanion[EncryptionKeyGroup]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[EncryptionKeyGroup]  = this
  def fromFieldsMap(__fieldsMap: Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): im.actor.server.model.encryption.EncryptionKeyGroup = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    im.actor.server.model.encryption.EncryptionKeyGroup(
      __fieldsMap.getOrElse(__fields.get(0), 0).asInstanceOf[Int],
      __fieldsMap.getOrElse(__fields.get(1), 0).asInstanceOf[Int],
      __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[Seq[Long]],
      __fieldsMap.getOrElse(__fields.get(3), Nil).asInstanceOf[Seq[String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[Option[im.actor.server.model.encryption.EncryptionKey]],
      __fieldsMap.getOrElse(__fields.get(5), Nil).asInstanceOf[Seq[im.actor.server.model.encryption.EncryptionKey]],
      __fieldsMap.getOrElse(__fields.get(6), Nil).asInstanceOf[Seq[im.actor.server.model.encryption.EncryptionKeySignature]]
    )
  }
  def descriptor: com.google.protobuf.Descriptors.Descriptor = ModelEncryptionProto.descriptor.getMessageTypes.get(2)
  def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    require(__field.getContainingType() == descriptor, "FieldDescriptor does not match message type.")
    var __out: com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    __field.getNumber match {
      case 3 => __out = im.actor.server.model.encryption.EncryptionKey
      case 4 => __out = im.actor.server.model.encryption.EncryptionKey
      case 5 => __out = im.actor.server.model.encryption.EncryptionKeySignature
    }
  __out
  }
  def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
  lazy val defaultInstance = im.actor.server.model.encryption.EncryptionKeyGroup(
  )
  implicit class EncryptionKeyGroupLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, EncryptionKeyGroup]) extends com.trueaccord.lenses.ObjectLens[UpperPB, EncryptionKeyGroup](_l) {
    def userId: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.userId)((c_, f_) => c_.copy(userId = f_))
    def id: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def authIds: com.trueaccord.lenses.Lens[UpperPB, Seq[Long]] = field(_.authIds)((c_, f_) => c_.copy(authIds = f_))
    def supportedEncryptions: com.trueaccord.lenses.Lens[UpperPB, Seq[String]] = field(_.supportedEncryptions)((c_, f_) => c_.copy(supportedEncryptions = f_))
    def identityKey: com.trueaccord.lenses.Lens[UpperPB, im.actor.server.model.encryption.EncryptionKey] = field(_.getIdentityKey)((c_, f_) => c_.copy(identityKey = Some(f_)))
    def optionalIdentityKey: com.trueaccord.lenses.Lens[UpperPB, Option[im.actor.server.model.encryption.EncryptionKey]] = field(_.identityKey)((c_, f_) => c_.copy(identityKey = f_))
    def keys: com.trueaccord.lenses.Lens[UpperPB, Seq[im.actor.server.model.encryption.EncryptionKey]] = field(_.keys)((c_, f_) => c_.copy(keys = f_))
    def signatures: com.trueaccord.lenses.Lens[UpperPB, Seq[im.actor.server.model.encryption.EncryptionKeySignature]] = field(_.signatures)((c_, f_) => c_.copy(signatures = f_))
  }
  final val USER_ID_FIELD_NUMBER = 1
  final val ID_FIELD_NUMBER = 2
  final val AUTH_IDS_FIELD_NUMBER = 7
  final val SUPPORTED_ENCRYPTIONS_FIELD_NUMBER = 6
  final val IDENTITY_KEY_FIELD_NUMBER = 3
  final val KEYS_FIELD_NUMBER = 4
  final val SIGNATURES_FIELD_NUMBER = 5
}
