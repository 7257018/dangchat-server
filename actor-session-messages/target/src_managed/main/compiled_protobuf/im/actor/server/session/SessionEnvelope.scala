// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package im.actor.server.session


import im.actor.server.api.TypeMappers._
import scala.collection.JavaConversions._

@SerialVersionUID(0L)
final case class SessionEnvelope(
    authId: Long = 0L,
    sessionId: Long = 0L,
    payload: im.actor.server.session.SessionEnvelope.Payload = im.actor.server.session.SessionEnvelope.Payload.Empty
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[SessionEnvelope] with com.trueaccord.lenses.Updatable[SessionEnvelope] {
    @transient
    lazy val serializedSize: Int = {
      var __size = 0
      __size += com.google.protobuf.CodedOutputStream.computeInt64Size(1, authId)
      __size += com.google.protobuf.CodedOutputStream.computeInt64Size(2, sessionId)
      if (payload.handleMessageBox.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(payload.handleMessageBox.get.serializedSize) + payload.handleMessageBox.get.serializedSize }
      if (payload.authorizeUser.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(payload.authorizeUser.get.serializedSize) + payload.authorizeUser.get.serializedSize }
      if (payload.subscribeToOnline.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(payload.subscribeToOnline.get.serializedSize) + payload.subscribeToOnline.get.serializedSize }
      if (payload.subscribeFromOnline.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(payload.subscribeFromOnline.get.serializedSize) + payload.subscribeFromOnline.get.serializedSize }
      if (payload.subscribeToGroupOnline.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(payload.subscribeToGroupOnline.get.serializedSize) + payload.subscribeToGroupOnline.get.serializedSize }
      if (payload.subscribeFromGroupOnline.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(payload.subscribeFromGroupOnline.get.serializedSize) + payload.subscribeFromGroupOnline.get.serializedSize }
      if (payload.subscribeToSeq.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(payload.subscribeToSeq.get.serializedSize) + payload.subscribeToSeq.get.serializedSize }
      if (payload.subscribeToWeak.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(payload.subscribeToWeak.get.serializedSize) + payload.subscribeToWeak.get.serializedSize }
      if (payload.unsubscribeFromWeak.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(payload.unsubscribeFromWeak.get.serializedSize) + payload.unsubscribeFromWeak.get.serializedSize }
      if (payload.getUpdateOptimizations.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(payload.getUpdateOptimizations.get.serializedSize) + payload.getUpdateOptimizations.get.serializedSize }
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      output.writeInt64(1, authId)
      output.writeInt64(2, sessionId)
      payload.handleMessageBox.foreach { __v => 
        output.writeTag(3, 2)
        output.writeRawVarint32(__v.serializedSize)
        __v.writeTo(output)
      };
      payload.authorizeUser.foreach { __v => 
        output.writeTag(4, 2)
        output.writeRawVarint32(__v.serializedSize)
        __v.writeTo(output)
      };
      payload.subscribeToOnline.foreach { __v => 
        output.writeTag(5, 2)
        output.writeRawVarint32(__v.serializedSize)
        __v.writeTo(output)
      };
      payload.subscribeFromOnline.foreach { __v => 
        output.writeTag(6, 2)
        output.writeRawVarint32(__v.serializedSize)
        __v.writeTo(output)
      };
      payload.subscribeToGroupOnline.foreach { __v => 
        output.writeTag(7, 2)
        output.writeRawVarint32(__v.serializedSize)
        __v.writeTo(output)
      };
      payload.subscribeFromGroupOnline.foreach { __v => 
        output.writeTag(8, 2)
        output.writeRawVarint32(__v.serializedSize)
        __v.writeTo(output)
      };
      payload.subscribeToSeq.foreach { __v => 
        output.writeTag(9, 2)
        output.writeRawVarint32(__v.serializedSize)
        __v.writeTo(output)
      };
      payload.subscribeToWeak.foreach { __v => 
        output.writeTag(10, 2)
        output.writeRawVarint32(__v.serializedSize)
        __v.writeTo(output)
      };
      payload.unsubscribeFromWeak.foreach { __v => 
        output.writeTag(11, 2)
        output.writeRawVarint32(__v.serializedSize)
        __v.writeTo(output)
      };
      payload.getUpdateOptimizations.foreach { __v => 
        output.writeTag(12, 2)
        output.writeRawVarint32(__v.serializedSize)
        __v.writeTo(output)
      };
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): im.actor.server.session.SessionEnvelope = {
      var __authId = this.authId
      var __sessionId = this.sessionId
      var __payload = this.payload
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __authId = __input.readInt64()
          case 16 =>
            __sessionId = __input.readInt64()
          case 26 =>
            __payload = im.actor.server.session.SessionEnvelope.Payload.HandleMessageBox(com.trueaccord.scalapb.LiteParser.readMessage(__input, payload.handleMessageBox.getOrElse(im.actor.server.session.HandleMessageBox.defaultInstance)))
          case 34 =>
            __payload = im.actor.server.session.SessionEnvelope.Payload.AuthorizeUser(com.trueaccord.scalapb.LiteParser.readMessage(__input, payload.authorizeUser.getOrElse(im.actor.server.session.AuthorizeUser.defaultInstance)))
          case 42 =>
            __payload = im.actor.server.session.SessionEnvelope.Payload.SubscribeToOnline(com.trueaccord.scalapb.LiteParser.readMessage(__input, payload.subscribeToOnline.getOrElse(im.actor.server.session.SubscribeToOnline.defaultInstance)))
          case 50 =>
            __payload = im.actor.server.session.SessionEnvelope.Payload.SubscribeFromOnline(com.trueaccord.scalapb.LiteParser.readMessage(__input, payload.subscribeFromOnline.getOrElse(im.actor.server.session.SubscribeFromOnline.defaultInstance)))
          case 58 =>
            __payload = im.actor.server.session.SessionEnvelope.Payload.SubscribeToGroupOnline(com.trueaccord.scalapb.LiteParser.readMessage(__input, payload.subscribeToGroupOnline.getOrElse(im.actor.server.session.SubscribeToGroupOnline.defaultInstance)))
          case 66 =>
            __payload = im.actor.server.session.SessionEnvelope.Payload.SubscribeFromGroupOnline(com.trueaccord.scalapb.LiteParser.readMessage(__input, payload.subscribeFromGroupOnline.getOrElse(im.actor.server.session.SubscribeFromGroupOnline.defaultInstance)))
          case 74 =>
            __payload = im.actor.server.session.SessionEnvelope.Payload.SubscribeToSeq(com.trueaccord.scalapb.LiteParser.readMessage(__input, payload.subscribeToSeq.getOrElse(im.actor.server.session.SubscribeToSeq.defaultInstance)))
          case 82 =>
            __payload = im.actor.server.session.SessionEnvelope.Payload.SubscribeToWeak(com.trueaccord.scalapb.LiteParser.readMessage(__input, payload.subscribeToWeak.getOrElse(im.actor.server.session.SubscribeToWeak.defaultInstance)))
          case 90 =>
            __payload = im.actor.server.session.SessionEnvelope.Payload.UnsubscribeFromWeak(com.trueaccord.scalapb.LiteParser.readMessage(__input, payload.unsubscribeFromWeak.getOrElse(im.actor.server.session.UnsubscribeFromWeak.defaultInstance)))
          case 98 =>
            __payload = im.actor.server.session.SessionEnvelope.Payload.GetUpdateOptimizations(com.trueaccord.scalapb.LiteParser.readMessage(__input, payload.getUpdateOptimizations.getOrElse(im.actor.server.session.GetUpdateOptimizations.defaultInstance)))
          case tag => __input.skipField(tag)
        }
      }
      im.actor.server.session.SessionEnvelope(
          authId = __authId,
          sessionId = __sessionId,
          payload = __payload
      )
    }
    def withAuthId(__v: Long): SessionEnvelope = copy(authId = __v)
    def withSessionId(__v: Long): SessionEnvelope = copy(sessionId = __v)
    def getHandleMessageBox: im.actor.server.session.HandleMessageBox = payload.handleMessageBox.getOrElse(im.actor.server.session.HandleMessageBox.defaultInstance)
    def withHandleMessageBox(__v: im.actor.server.session.HandleMessageBox): SessionEnvelope = copy(payload = im.actor.server.session.SessionEnvelope.Payload.HandleMessageBox(__v))
    def getAuthorizeUser: im.actor.server.session.AuthorizeUser = payload.authorizeUser.getOrElse(im.actor.server.session.AuthorizeUser.defaultInstance)
    def withAuthorizeUser(__v: im.actor.server.session.AuthorizeUser): SessionEnvelope = copy(payload = im.actor.server.session.SessionEnvelope.Payload.AuthorizeUser(__v))
    def getSubscribeToOnline: im.actor.server.session.SubscribeToOnline = payload.subscribeToOnline.getOrElse(im.actor.server.session.SubscribeToOnline.defaultInstance)
    def withSubscribeToOnline(__v: im.actor.server.session.SubscribeToOnline): SessionEnvelope = copy(payload = im.actor.server.session.SessionEnvelope.Payload.SubscribeToOnline(__v))
    def getSubscribeFromOnline: im.actor.server.session.SubscribeFromOnline = payload.subscribeFromOnline.getOrElse(im.actor.server.session.SubscribeFromOnline.defaultInstance)
    def withSubscribeFromOnline(__v: im.actor.server.session.SubscribeFromOnline): SessionEnvelope = copy(payload = im.actor.server.session.SessionEnvelope.Payload.SubscribeFromOnline(__v))
    def getSubscribeToGroupOnline: im.actor.server.session.SubscribeToGroupOnline = payload.subscribeToGroupOnline.getOrElse(im.actor.server.session.SubscribeToGroupOnline.defaultInstance)
    def withSubscribeToGroupOnline(__v: im.actor.server.session.SubscribeToGroupOnline): SessionEnvelope = copy(payload = im.actor.server.session.SessionEnvelope.Payload.SubscribeToGroupOnline(__v))
    def getSubscribeFromGroupOnline: im.actor.server.session.SubscribeFromGroupOnline = payload.subscribeFromGroupOnline.getOrElse(im.actor.server.session.SubscribeFromGroupOnline.defaultInstance)
    def withSubscribeFromGroupOnline(__v: im.actor.server.session.SubscribeFromGroupOnline): SessionEnvelope = copy(payload = im.actor.server.session.SessionEnvelope.Payload.SubscribeFromGroupOnline(__v))
    def getSubscribeToSeq: im.actor.server.session.SubscribeToSeq = payload.subscribeToSeq.getOrElse(im.actor.server.session.SubscribeToSeq.defaultInstance)
    def withSubscribeToSeq(__v: im.actor.server.session.SubscribeToSeq): SessionEnvelope = copy(payload = im.actor.server.session.SessionEnvelope.Payload.SubscribeToSeq(__v))
    def getSubscribeToWeak: im.actor.server.session.SubscribeToWeak = payload.subscribeToWeak.getOrElse(im.actor.server.session.SubscribeToWeak.defaultInstance)
    def withSubscribeToWeak(__v: im.actor.server.session.SubscribeToWeak): SessionEnvelope = copy(payload = im.actor.server.session.SessionEnvelope.Payload.SubscribeToWeak(__v))
    def getUnsubscribeFromWeak: im.actor.server.session.UnsubscribeFromWeak = payload.unsubscribeFromWeak.getOrElse(im.actor.server.session.UnsubscribeFromWeak.defaultInstance)
    def withUnsubscribeFromWeak(__v: im.actor.server.session.UnsubscribeFromWeak): SessionEnvelope = copy(payload = im.actor.server.session.SessionEnvelope.Payload.UnsubscribeFromWeak(__v))
    def getGetUpdateOptimizations: im.actor.server.session.GetUpdateOptimizations = payload.getUpdateOptimizations.getOrElse(im.actor.server.session.GetUpdateOptimizations.defaultInstance)
    def withGetUpdateOptimizations(__v: im.actor.server.session.GetUpdateOptimizations): SessionEnvelope = copy(payload = im.actor.server.session.SessionEnvelope.Payload.GetUpdateOptimizations(__v))
    def clearPayload: SessionEnvelope = copy(payload = im.actor.server.session.SessionEnvelope.Payload.Empty)
    def withPayload(__v: im.actor.server.session.SessionEnvelope.Payload): SessionEnvelope = copy(payload = __v)
    def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
      __field.getNumber match {
        case 1 => authId
        case 2 => sessionId
        case 3 => payload.handleMessageBox.getOrElse(null)
        case 4 => payload.authorizeUser.getOrElse(null)
        case 5 => payload.subscribeToOnline.getOrElse(null)
        case 6 => payload.subscribeFromOnline.getOrElse(null)
        case 7 => payload.subscribeToGroupOnline.getOrElse(null)
        case 8 => payload.subscribeFromGroupOnline.getOrElse(null)
        case 9 => payload.subscribeToSeq.getOrElse(null)
        case 10 => payload.subscribeToWeak.getOrElse(null)
        case 11 => payload.unsubscribeFromWeak.getOrElse(null)
        case 12 => payload.getUpdateOptimizations.getOrElse(null)
      }
    }
    override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = im.actor.server.session.SessionEnvelope
}

object SessionEnvelope extends com.trueaccord.scalapb.GeneratedMessageCompanion[SessionEnvelope]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[SessionEnvelope]  = this
  def fromFieldsMap(__fieldsMap: Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): im.actor.server.session.SessionEnvelope = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    im.actor.server.session.SessionEnvelope(
      __fieldsMap(__fields.get(0)).asInstanceOf[Long],
      __fieldsMap(__fields.get(1)).asInstanceOf[Long],
      payload = __fieldsMap.get(__fields.get(2)).asInstanceOf[Option[im.actor.server.session.HandleMessageBox]].map(im.actor.server.session.SessionEnvelope.Payload.HandleMessageBox(_)) orElse
__fieldsMap.get(__fields.get(3)).asInstanceOf[Option[im.actor.server.session.AuthorizeUser]].map(im.actor.server.session.SessionEnvelope.Payload.AuthorizeUser(_)) orElse
__fieldsMap.get(__fields.get(4)).asInstanceOf[Option[im.actor.server.session.SubscribeToOnline]].map(im.actor.server.session.SessionEnvelope.Payload.SubscribeToOnline(_)) orElse
__fieldsMap.get(__fields.get(5)).asInstanceOf[Option[im.actor.server.session.SubscribeFromOnline]].map(im.actor.server.session.SessionEnvelope.Payload.SubscribeFromOnline(_)) orElse
__fieldsMap.get(__fields.get(6)).asInstanceOf[Option[im.actor.server.session.SubscribeToGroupOnline]].map(im.actor.server.session.SessionEnvelope.Payload.SubscribeToGroupOnline(_)) orElse
__fieldsMap.get(__fields.get(7)).asInstanceOf[Option[im.actor.server.session.SubscribeFromGroupOnline]].map(im.actor.server.session.SessionEnvelope.Payload.SubscribeFromGroupOnline(_)) orElse
__fieldsMap.get(__fields.get(8)).asInstanceOf[Option[im.actor.server.session.SubscribeToSeq]].map(im.actor.server.session.SessionEnvelope.Payload.SubscribeToSeq(_)) orElse
__fieldsMap.get(__fields.get(9)).asInstanceOf[Option[im.actor.server.session.SubscribeToWeak]].map(im.actor.server.session.SessionEnvelope.Payload.SubscribeToWeak(_)) orElse
__fieldsMap.get(__fields.get(10)).asInstanceOf[Option[im.actor.server.session.UnsubscribeFromWeak]].map(im.actor.server.session.SessionEnvelope.Payload.UnsubscribeFromWeak(_)) orElse
__fieldsMap.get(__fields.get(11)).asInstanceOf[Option[im.actor.server.session.GetUpdateOptimizations]].map(im.actor.server.session.SessionEnvelope.Payload.GetUpdateOptimizations(_)) getOrElse im.actor.server.session.SessionEnvelope.Payload.Empty
    )
  }
  def descriptor: com.google.protobuf.Descriptors.Descriptor = SessionProto.descriptor.getMessageTypes.get(0)
  def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    require(__field.getContainingType() == descriptor, "FieldDescriptor does not match message type.")
    var __out: com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    __field.getNumber match {
      case 3 => __out = im.actor.server.session.HandleMessageBox
      case 4 => __out = im.actor.server.session.AuthorizeUser
      case 5 => __out = im.actor.server.session.SubscribeToOnline
      case 6 => __out = im.actor.server.session.SubscribeFromOnline
      case 7 => __out = im.actor.server.session.SubscribeToGroupOnline
      case 8 => __out = im.actor.server.session.SubscribeFromGroupOnline
      case 9 => __out = im.actor.server.session.SubscribeToSeq
      case 10 => __out = im.actor.server.session.SubscribeToWeak
      case 11 => __out = im.actor.server.session.UnsubscribeFromWeak
      case 12 => __out = im.actor.server.session.GetUpdateOptimizations
    }
  __out
  }
  def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
  lazy val defaultInstance = im.actor.server.session.SessionEnvelope(
    authId = 0L,
    sessionId = 0L
  )
  sealed trait Payload extends com.trueaccord.scalapb.GeneratedOneof {
    def isEmpty: Boolean = false
    def isDefined: Boolean = true
    def number: Int
    def isHandleMessageBox: Boolean = false
    def isAuthorizeUser: Boolean = false
    def isSubscribeToOnline: Boolean = false
    def isSubscribeFromOnline: Boolean = false
    def isSubscribeToGroupOnline: Boolean = false
    def isSubscribeFromGroupOnline: Boolean = false
    def isSubscribeToSeq: Boolean = false
    def isSubscribeToWeak: Boolean = false
    def isUnsubscribeFromWeak: Boolean = false
    def isGetUpdateOptimizations: Boolean = false
    def handleMessageBox: Option[im.actor.server.session.HandleMessageBox] = None
    def authorizeUser: Option[im.actor.server.session.AuthorizeUser] = None
    def subscribeToOnline: Option[im.actor.server.session.SubscribeToOnline] = None
    def subscribeFromOnline: Option[im.actor.server.session.SubscribeFromOnline] = None
    def subscribeToGroupOnline: Option[im.actor.server.session.SubscribeToGroupOnline] = None
    def subscribeFromGroupOnline: Option[im.actor.server.session.SubscribeFromGroupOnline] = None
    def subscribeToSeq: Option[im.actor.server.session.SubscribeToSeq] = None
    def subscribeToWeak: Option[im.actor.server.session.SubscribeToWeak] = None
    def unsubscribeFromWeak: Option[im.actor.server.session.UnsubscribeFromWeak] = None
    def getUpdateOptimizations: Option[im.actor.server.session.GetUpdateOptimizations] = None
  }
  object Payload extends {
    @SerialVersionUID(0L)
    case object Empty extends Payload {
      override def isEmpty: Boolean = true
      override def isDefined: Boolean = false
      override def number: Int = 0
    }
  
    @SerialVersionUID(0L)
    case class HandleMessageBox(value: im.actor.server.session.HandleMessageBox) extends Payload {
      override def isHandleMessageBox: Boolean = true
      override def handleMessageBox: Option[im.actor.server.session.HandleMessageBox] = Some(value)
      override def number: Int = 3
    }
    @SerialVersionUID(0L)
    case class AuthorizeUser(value: im.actor.server.session.AuthorizeUser) extends Payload {
      override def isAuthorizeUser: Boolean = true
      override def authorizeUser: Option[im.actor.server.session.AuthorizeUser] = Some(value)
      override def number: Int = 4
    }
    @SerialVersionUID(0L)
    case class SubscribeToOnline(value: im.actor.server.session.SubscribeToOnline) extends Payload {
      override def isSubscribeToOnline: Boolean = true
      override def subscribeToOnline: Option[im.actor.server.session.SubscribeToOnline] = Some(value)
      override def number: Int = 5
    }
    @SerialVersionUID(0L)
    case class SubscribeFromOnline(value: im.actor.server.session.SubscribeFromOnline) extends Payload {
      override def isSubscribeFromOnline: Boolean = true
      override def subscribeFromOnline: Option[im.actor.server.session.SubscribeFromOnline] = Some(value)
      override def number: Int = 6
    }
    @SerialVersionUID(0L)
    case class SubscribeToGroupOnline(value: im.actor.server.session.SubscribeToGroupOnline) extends Payload {
      override def isSubscribeToGroupOnline: Boolean = true
      override def subscribeToGroupOnline: Option[im.actor.server.session.SubscribeToGroupOnline] = Some(value)
      override def number: Int = 7
    }
    @SerialVersionUID(0L)
    case class SubscribeFromGroupOnline(value: im.actor.server.session.SubscribeFromGroupOnline) extends Payload {
      override def isSubscribeFromGroupOnline: Boolean = true
      override def subscribeFromGroupOnline: Option[im.actor.server.session.SubscribeFromGroupOnline] = Some(value)
      override def number: Int = 8
    }
    @SerialVersionUID(0L)
    case class SubscribeToSeq(value: im.actor.server.session.SubscribeToSeq) extends Payload {
      override def isSubscribeToSeq: Boolean = true
      override def subscribeToSeq: Option[im.actor.server.session.SubscribeToSeq] = Some(value)
      override def number: Int = 9
    }
    @SerialVersionUID(0L)
    case class SubscribeToWeak(value: im.actor.server.session.SubscribeToWeak) extends Payload {
      override def isSubscribeToWeak: Boolean = true
      override def subscribeToWeak: Option[im.actor.server.session.SubscribeToWeak] = Some(value)
      override def number: Int = 10
    }
    @SerialVersionUID(0L)
    case class UnsubscribeFromWeak(value: im.actor.server.session.UnsubscribeFromWeak) extends Payload {
      override def isUnsubscribeFromWeak: Boolean = true
      override def unsubscribeFromWeak: Option[im.actor.server.session.UnsubscribeFromWeak] = Some(value)
      override def number: Int = 11
    }
    @SerialVersionUID(0L)
    case class GetUpdateOptimizations(value: im.actor.server.session.GetUpdateOptimizations) extends Payload {
      override def isGetUpdateOptimizations: Boolean = true
      override def getUpdateOptimizations: Option[im.actor.server.session.GetUpdateOptimizations] = Some(value)
      override def number: Int = 12
    }
  }
  implicit class SessionEnvelopeLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, SessionEnvelope]) extends com.trueaccord.lenses.ObjectLens[UpperPB, SessionEnvelope](_l) {
    def authId: com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.authId)((c_, f_) => c_.copy(authId = f_))
    def sessionId: com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.sessionId)((c_, f_) => c_.copy(sessionId = f_))
    def handleMessageBox: com.trueaccord.lenses.Lens[UpperPB, im.actor.server.session.HandleMessageBox] = field(_.getHandleMessageBox)((c_, f_) => c_.copy(payload = im.actor.server.session.SessionEnvelope.Payload.HandleMessageBox(f_)))
    def authorizeUser: com.trueaccord.lenses.Lens[UpperPB, im.actor.server.session.AuthorizeUser] = field(_.getAuthorizeUser)((c_, f_) => c_.copy(payload = im.actor.server.session.SessionEnvelope.Payload.AuthorizeUser(f_)))
    def subscribeToOnline: com.trueaccord.lenses.Lens[UpperPB, im.actor.server.session.SubscribeToOnline] = field(_.getSubscribeToOnline)((c_, f_) => c_.copy(payload = im.actor.server.session.SessionEnvelope.Payload.SubscribeToOnline(f_)))
    def subscribeFromOnline: com.trueaccord.lenses.Lens[UpperPB, im.actor.server.session.SubscribeFromOnline] = field(_.getSubscribeFromOnline)((c_, f_) => c_.copy(payload = im.actor.server.session.SessionEnvelope.Payload.SubscribeFromOnline(f_)))
    def subscribeToGroupOnline: com.trueaccord.lenses.Lens[UpperPB, im.actor.server.session.SubscribeToGroupOnline] = field(_.getSubscribeToGroupOnline)((c_, f_) => c_.copy(payload = im.actor.server.session.SessionEnvelope.Payload.SubscribeToGroupOnline(f_)))
    def subscribeFromGroupOnline: com.trueaccord.lenses.Lens[UpperPB, im.actor.server.session.SubscribeFromGroupOnline] = field(_.getSubscribeFromGroupOnline)((c_, f_) => c_.copy(payload = im.actor.server.session.SessionEnvelope.Payload.SubscribeFromGroupOnline(f_)))
    def subscribeToSeq: com.trueaccord.lenses.Lens[UpperPB, im.actor.server.session.SubscribeToSeq] = field(_.getSubscribeToSeq)((c_, f_) => c_.copy(payload = im.actor.server.session.SessionEnvelope.Payload.SubscribeToSeq(f_)))
    def subscribeToWeak: com.trueaccord.lenses.Lens[UpperPB, im.actor.server.session.SubscribeToWeak] = field(_.getSubscribeToWeak)((c_, f_) => c_.copy(payload = im.actor.server.session.SessionEnvelope.Payload.SubscribeToWeak(f_)))
    def unsubscribeFromWeak: com.trueaccord.lenses.Lens[UpperPB, im.actor.server.session.UnsubscribeFromWeak] = field(_.getUnsubscribeFromWeak)((c_, f_) => c_.copy(payload = im.actor.server.session.SessionEnvelope.Payload.UnsubscribeFromWeak(f_)))
    def getUpdateOptimizations: com.trueaccord.lenses.Lens[UpperPB, im.actor.server.session.GetUpdateOptimizations] = field(_.getGetUpdateOptimizations)((c_, f_) => c_.copy(payload = im.actor.server.session.SessionEnvelope.Payload.GetUpdateOptimizations(f_)))
    def payload: com.trueaccord.lenses.Lens[UpperPB, im.actor.server.session.SessionEnvelope.Payload] = field(_.payload)((c_, f_) => c_.copy(payload = f_))
  }
  final val AUTH_ID_FIELD_NUMBER = 1
  final val SESSION_ID_FIELD_NUMBER = 2
  final val HANDLE_MESSAGE_BOX_FIELD_NUMBER = 3
  final val AUTHORIZE_USER_FIELD_NUMBER = 4
  final val SUBSCRIBE_TO_ONLINE_FIELD_NUMBER = 5
  final val SUBSCRIBE_FROM_ONLINE_FIELD_NUMBER = 6
  final val SUBSCRIBE_TO_GROUP_ONLINE_FIELD_NUMBER = 7
  final val SUBSCRIBE_FROM_GROUP_ONLINE_FIELD_NUMBER = 8
  final val SUBSCRIBE_TO_SEQ_FIELD_NUMBER = 9
  final val SUBSCRIBE_TO_WEAK_FIELD_NUMBER = 10
  final val UNSUBSCRIBE_FROM_WEAK_FIELD_NUMBER = 11
  final val GET_UPDATE_OPTIMIZATIONS_FIELD_NUMBER = 12
}
