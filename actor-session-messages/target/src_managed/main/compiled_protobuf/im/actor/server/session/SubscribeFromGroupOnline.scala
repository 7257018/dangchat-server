// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package im.actor.server.session


import im.actor.server.api.TypeMappers._
import scala.collection.JavaConversions._

@SerialVersionUID(0L)
final case class SubscribeFromGroupOnline(
    groupIds: Seq[Int] = Nil
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[SubscribeFromGroupOnline] with com.trueaccord.lenses.Updatable[SubscribeFromGroupOnline] with im.actor.server.session.SubscribeCommand {
    @transient
    lazy val serializedSize: Int = {
      var __size = 0
      groupIds.foreach(groupIds => __size += com.google.protobuf.CodedOutputStream.computeInt32Size(1, groupIds))
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      groupIds.foreach { __v => 
        output.writeInt32(1, __v)
      };
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): im.actor.server.session.SubscribeFromGroupOnline = {
      val __groupIds = (scala.collection.immutable.Vector.newBuilder[Int] ++= this.groupIds)
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __groupIds += __input.readInt32()
          case tag => __input.skipField(tag)
        }
      }
      im.actor.server.session.SubscribeFromGroupOnline(
          groupIds = __groupIds.result()
      )
    }
    def clearGroupIds = copy(groupIds = Seq.empty)
    def addGroupIds(__vs: Int*): SubscribeFromGroupOnline = addAllGroupIds(__vs)
    def addAllGroupIds(__vs: TraversableOnce[Int]): SubscribeFromGroupOnline = copy(groupIds = groupIds ++ __vs)
    def withGroupIds(__v: Seq[Int]): SubscribeFromGroupOnline = copy(groupIds = __v)
    def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
      __field.getNumber match {
        case 1 => groupIds
      }
    }
    override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = im.actor.server.session.SubscribeFromGroupOnline
}

object SubscribeFromGroupOnline extends com.trueaccord.scalapb.GeneratedMessageCompanion[SubscribeFromGroupOnline]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[SubscribeFromGroupOnline]  = this
  def fromFieldsMap(__fieldsMap: Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): im.actor.server.session.SubscribeFromGroupOnline = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    im.actor.server.session.SubscribeFromGroupOnline(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[Seq[Int]]
    )
  }
  def descriptor: com.google.protobuf.Descriptors.Descriptor = SessionProto.descriptor.getMessageTypes.get(7)
  def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__field)
  def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
  lazy val defaultInstance = im.actor.server.session.SubscribeFromGroupOnline(
  )
  implicit class SubscribeFromGroupOnlineLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, SubscribeFromGroupOnline]) extends com.trueaccord.lenses.ObjectLens[UpperPB, SubscribeFromGroupOnline](_l) {
    def groupIds: com.trueaccord.lenses.Lens[UpperPB, Seq[Int]] = field(_.groupIds)((c_, f_) => c_.copy(groupIds = f_))
  }
  final val GROUP_IDS_FIELD_NUMBER = 1
}
