// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package im.actor.server.session


import im.actor.server.api.TypeMappers._
import scala.collection.JavaConversions._

@SerialVersionUID(0L)
final case class SubscribeToSeq(
    optimizations: Seq[Int] = Nil
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[SubscribeToSeq] with com.trueaccord.lenses.Updatable[SubscribeToSeq] with im.actor.server.session.SubscribeCommand {
    @transient
    lazy val serializedSize: Int = {
      var __size = 0
      optimizations.foreach(optimizations => __size += com.google.protobuf.CodedOutputStream.computeInt32Size(1, optimizations))
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      optimizations.foreach { __v => 
        output.writeInt32(1, __v)
      };
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): im.actor.server.session.SubscribeToSeq = {
      val __optimizations = (scala.collection.immutable.Vector.newBuilder[Int] ++= this.optimizations)
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __optimizations += __input.readInt32()
          case tag => __input.skipField(tag)
        }
      }
      im.actor.server.session.SubscribeToSeq(
          optimizations = __optimizations.result()
      )
    }
    def clearOptimizations = copy(optimizations = Seq.empty)
    def addOptimizations(__vs: Int*): SubscribeToSeq = addAllOptimizations(__vs)
    def addAllOptimizations(__vs: TraversableOnce[Int]): SubscribeToSeq = copy(optimizations = optimizations ++ __vs)
    def withOptimizations(__v: Seq[Int]): SubscribeToSeq = copy(optimizations = __v)
    def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
      __field.getNumber match {
        case 1 => optimizations
      }
    }
    override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = im.actor.server.session.SubscribeToSeq
}

object SubscribeToSeq extends com.trueaccord.scalapb.GeneratedMessageCompanion[SubscribeToSeq]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[SubscribeToSeq]  = this
  def fromFieldsMap(__fieldsMap: Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): im.actor.server.session.SubscribeToSeq = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    im.actor.server.session.SubscribeToSeq(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[Seq[Int]]
    )
  }
  def descriptor: com.google.protobuf.Descriptors.Descriptor = SessionProto.descriptor.getMessageTypes.get(8)
  def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__field)
  def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
  lazy val defaultInstance = im.actor.server.session.SubscribeToSeq(
  )
  implicit class SubscribeToSeqLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, SubscribeToSeq]) extends com.trueaccord.lenses.ObjectLens[UpperPB, SubscribeToSeq](_l) {
    def optimizations: com.trueaccord.lenses.Lens[UpperPB, Seq[Int]] = field(_.optimizations)((c_, f_) => c_.copy(optimizations = f_))
  }
  final val OPTIMIZATIONS_FIELD_NUMBER = 1
}
